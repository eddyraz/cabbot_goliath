(undo-tree-save-format-version . 1)
"d0f71f2d89c6d8ee41c7ac378ebcf6d904e48f36"
[nil nil nil nil (25409 29094 804503 627000) 0 nil]
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1519) (undo-tree-id0 . -1) 1520 (t 25408 35607 941008 165000)) nil (25409 29094 804496 514000) 0 nil])
([nil nil ((1563 . 1565) (t 25409 29094 815332 115000)) nil (25409 30584 671127 971000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1574) (1574 . 1575) (#(")" 0 1 (fontified nil)) . -1574) (1574 . 1575) (1565 . 1575)) nil (25409 30584 671123 61000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1571) (undo-tree-id2 . -1) 1572 (t 25409 30584 673470 92000)) nil (25409 30680 551759 998000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1569) (undo-tree-id1 . -1) 1570) nil (25409 30680 551750 60000) 0 nil])
([nil nil ((1569 . 1571) (t 25409 30680 569540 79000)) nil (25409 30683 926411 238000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -1571) (undo-tree-id3 . -1) 1572) nil (25409 30683 926409 144000) 0 nil])
([nil nil ((1571 . 1572)) nil (25409 30683 926394 807000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1569) (undo-tree-id5 . -1) 1570 (t 25409 30683 969542 983000)) nil (25409 30732 929179 20000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -1570) (undo-tree-id4 . -1) 1571) nil (25409 30732 929173 810000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face font-lock-function-name-face)) . -2625) (undo-tree-id11 . -1) (#("b" 0 1 (fontified t face font-lock-function-name-face)) . -2626) (undo-tree-id12 . -1) 2627 (t 25409 30732 941587 691000)) nil (25409 34320 993645 234000) 0 nil])
([nil nil ((2625 . 2631)) nil (25409 34320 993642 919000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -2418) (undo-tree-id9 . -1) (#("b" 0 1 (fontified t)) . -2419) (undo-tree-id10 . -1) 2420) nil (25409 34320 993641 46000) 0 nil])
([nil nil ((2418 . 2423)) nil (25409 34320 993638 581000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-function-name-face)) . -2633) (undo-tree-id8 . -1) 2634) nil (25409 34320 993637 319000) 0 nil])
([nil nil ((3918 . 3919)) nil (25409 34320 993635 566000) 0 nil])
([nil nil ((3919 . 3924)) nil (25409 34320 993634 634000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face font-lock-function-name-face)) . -3920) (undo-tree-id7 . -1) 3921) nil (25409 34320 993633 402000) 0 nil])
([nil nil ((3920 . 3921)) nil (25409 34320 993631 758000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t face font-lock-function-name-face)) . -3920) (undo-tree-id6 . -1) 3921) nil (25409 34320 993630 276000) 0 nil])
([nil nil ((3920 . 3921)) nil (25409 34320 993618 494000) 0 nil])
([nil nil ((2487 . 2493)) nil (25409 34320 993614 336000) 0 nil])
([nil nil ((#("  def parse_incomming_data(data) do
    loan_code_field = data[\"Codprestamo\"]
    quota_concept_list = data[\"CuotasConcepto\"]
    quota_plan_list = data[\"PlanCuotas\"]

    final_map = %{}

    # ++++++++++++++++++++Para la tabla ClientsCuota++++++++++++++++++++++++++++++++++

    quota_concept_list
    |> Enum.map(fn
      %{
        \"Seccuota\" => quota_sec_value,
        \"Codconcepto\" => concept_code_value,
        \"Numdiascalc\" => num_calc_days_values,
        \"Montocuota\" => quota_amount_value,
        \"Montodevengado\" => earned_amount_value,
        \"Montopagado\" => paid_amount_value,
        \"Fechapago\" => payment_date_value,
        \"Estadoconcepto\" => concept_state_value
      } ->
        concept_quota_final_map =
          %{
            \"Seccuota\" => quota_sec_value,
            \"Codconcepto\" => concept_code_value,
            \"Numdiascalc\" => num_calc_days_values,
            \"Montocuota\" => quota_amount_value,
            \"Montodevengado\" => earned_amount_value,
            \"Montopagado\" => paid_amount_value,
            \"Fechapago\" => payment_date_value,
            \"Estadoconcepto\" => concept_state_value
          }
          |> field_translator(\"CuotasConcepto\")
          |> request_data_merge(concept_quota_map_fill_up(), loan_code_field)

        concept_parsed_dates =
          concept_quota_final_map
          |> extract_date_fields()

        proto_concept_quota_map =
          Map.merge(concept_quota_final_map, concept_parsed_dates)
          |> Map.update!(\"payment_date\", fn _x -> ~N[1970-01-01 00:00:00] end)
          |> Map.update!(\"quota_sec\", fn _x -> _x  |> String.to_integer() end)

        Enum.into([ClientsQuota: proto_concept_quota_map], %{})
    end)

    # ++++++++++++++++++++Para la tabla Cuota++++++++++++++++++++++++++++++++++

    quota_plan_list
    |> Enum.map(fn %{
                     \"Diasatrcuota\" => delayed_days_value,
                     \"Estadocuota\" => quota_state_value,
                     \"Fechainicio\" => start_date_value,
                     \"Fechapago\" => payment_date_value,
                     \"Fechavencimiento\" => due_date_value,
                     \"Seccuota\" => quota_sequence_value
                   } ->
      quota_final_map =
        %{
          \"Diasatrcuota\" => delayed_days_value,
          \"Estadocuota\" => quota_state_value,
          \"Fechainicio\" => start_date_value,
          \"Fechapago\" => payment_date_value,
          \"Fechavencimiento\" => due_date_value,
          \"Seccuota\" => quota_sequence_value
        }
        |> field_translator(\"PlanCuotas\")
        |> request_data_merge(quota_map_fill_up(), loan_code_field)

      parsed_dates =
        quota_final_map
        |> extract_date_fields()

      proto_quota_map =
        Map.merge(quota_final_map, parsed_dates)
        |> Map.update!(\"payment_date\", fn _x -> ~N[1970-01-01 00:00:00] end)

      #      Enum.into([Quota: proto_quota_map], final_map)
    end)
  end
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 26 (fontified t face font-lock-function-name-face) 26 33 (fontified t) 33 35 (fontified t face font-lock-keyword-face) 35 40 (fontified t) 40 55 (fontified t face font-lock-variable-name-face) 55 63 (fontified t) 63 64 (syntax-table (15) fontified t face font-lock-string-face) 64 75 (fontified t face font-lock-string-face) 75 76 (syntax-table (15) fontified t face font-lock-string-face) 76 82 (fontified t) 82 100 (fontified t face font-lock-variable-name-face) 100 108 (fontified t) 108 109 (syntax-table (15) fontified t face font-lock-string-face) 109 123 (fontified t face font-lock-string-face) 123 124 (syntax-table (15) fontified t face font-lock-string-face) 124 130 (fontified t) 130 145 (fontified t face font-lock-variable-name-face) 145 153 (fontified t) 153 154 (syntax-table (15) fontified t face font-lock-string-face) 154 164 (fontified t face font-lock-string-face) 164 165 (syntax-table (15) fontified t face font-lock-string-face) 165 172 (fontified t) 172 181 (fontified t face font-lock-variable-name-face) 181 193 (fontified t) 193 195 (fontified t face font-lock-comment-delimiter-face) 195 268 (fontified t face font-lock-comment-face) 268 276 (face font-lock-comment-face fontified t) 276 307 (fontified t) 307 311 (fontified t face font-lock-type-face) 311 316 (fontified t) 316 318 (fontified t face font-lock-keyword-face) 318 336 (fontified t) 336 337 (syntax-table (15) fontified t face font-lock-string-face) 337 345 (fontified t face font-lock-string-face) 345 346 (syntax-table (15) fontified t face font-lock-string-face) 346 375 (fontified t) 375 376 (syntax-table (15) fontified t face font-lock-string-face) 376 387 (fontified t face font-lock-string-face) 387 388 (syntax-table (15) fontified t face font-lock-string-face) 388 420 (fontified t) 420 421 (syntax-table (15) fontified t face font-lock-string-face) 421 432 (fontified t face font-lock-string-face) 432 433 (syntax-table (15) fontified t face font-lock-string-face) 433 467 (fontified t) 467 468 (syntax-table (15) fontified t face font-lock-string-face) 468 478 (fontified t face font-lock-string-face) 478 479 (syntax-table (15) fontified t face font-lock-string-face) 479 511 (fontified t) 511 512 (syntax-table (15) fontified t face font-lock-string-face) 512 526 (fontified t face font-lock-string-face) 526 527 (syntax-table (15) fontified t face font-lock-string-face) 527 560 (fontified t) 560 561 (syntax-table (15) fontified t face font-lock-string-face) 561 572 (fontified t face font-lock-string-face) 572 573 (syntax-table (15) fontified t face font-lock-string-face) 573 604 (fontified t) 604 605 (syntax-table (15) fontified t face font-lock-string-face) 605 614 (fontified t face font-lock-string-face) 614 615 (syntax-table (15) fontified t face font-lock-string-face) 615 647 (fontified t) 647 648 (syntax-table (15) fontified t face font-lock-string-face) 648 662 (fontified t face font-lock-string-face) 662 663 (syntax-table (15) fontified t face font-lock-string-face) 663 706 (fontified t) 706 729 (fontified t face font-lock-variable-name-face) 729 757 (fontified t) 757 758 (fontified t syntax-table (15) face font-lock-string-face) 758 766 (fontified t face font-lock-string-face) 766 767 (fontified t syntax-table (15) face font-lock-string-face) 767 776 (fontified t) 776 788 (fontified t) 788 800 (fontified t) 800 801 (syntax-table (15) fontified t face font-lock-string-face) 801 812 (fontified t face font-lock-string-face) 812 813 (syntax-table (15) fontified t face font-lock-string-face) 813 849 (fontified t) 849 850 (syntax-table (15) fontified t face font-lock-string-face) 850 861 (fontified t face font-lock-string-face) 861 862 (syntax-table (15) fontified t face font-lock-string-face) 862 900 (fontified t) 900 901 (syntax-table (15) fontified t face font-lock-string-face) 901 911 (fontified t face font-lock-string-face) 911 912 (syntax-table (15) fontified t face font-lock-string-face) 912 948 (fontified t) 948 949 (syntax-table (15) fontified t face font-lock-string-face) 949 963 (fontified t face font-lock-string-face) 963 964 (syntax-table (15) fontified t face font-lock-string-face) 964 1001 (fontified t) 1001 1002 (syntax-table (15) fontified t face font-lock-string-face) 1002 1013 (fontified t face font-lock-string-face) 1013 1014 (syntax-table (15) fontified t face font-lock-string-face) 1014 1049 (fontified t) 1049 1050 (syntax-table (15) fontified t face font-lock-string-face) 1050 1059 (fontified t face font-lock-string-face) 1059 1060 (syntax-table (15) fontified t face font-lock-string-face) 1060 1096 (fontified t) 1096 1097 (syntax-table (15) fontified t face font-lock-string-face) 1097 1111 (fontified t face font-lock-string-face) 1111 1112 (syntax-table (15) fontified t face font-lock-string-face) 1112 1178 (fontified t) 1178 1179 (syntax-table (15) fontified t face font-lock-string-face) 1179 1193 (fontified t face font-lock-string-face) 1193 1194 (syntax-table (15) fontified t face font-lock-string-face) 1194 1283 (fontified t) 1283 1288 (fontified t face font-lock-variable-name-face) 1288 1303 (face font-lock-variable-name-face fontified t) 1303 1306 (fontified t) 1306 1384 (fontified t) 1384 1407 (fontified t face font-lock-variable-name-face) 1407 1420 (fontified t) 1420 1423 (fontified t face font-lock-type-face) 1423 1490 (fontified t) 1490 1493 (fontified t face font-lock-type-face) 1493 1502 (fontified t) 1502 1503 (syntax-table (15) fontified t face font-lock-string-face) 1503 1515 (fontified t face font-lock-string-face) 1515 1516 (syntax-table (15) fontified t face font-lock-string-face) 1516 1518 (fontified t) 1518 1520 (fontified t face font-lock-keyword-face) 1520 1521 (fontified t) 1521 1523 (fontified t face font-lock-comment-face) 1523 1527 (fontified t) 1527 1529 (fontified t face font-lock-builtin-face) 1529 1530 (fontified t) 1530 1549 (fontified t face font-lock-string-face) 1549 1551 (fontified t) 1551 1554 (fontified t face font-lock-keyword-face) 1554 1569 (fontified t) 1569 1572 (fontified t face font-lock-type-face) 1572 1581 (fontified t) 1581 1582 (syntax-table (15) fontified t face font-lock-string-face) 1582 1591 (fontified t face font-lock-string-face) 1591 1592 (syntax-table (15) fontified t face font-lock-string-face) 1592 1594 (fontified t) 1594 1596 (fontified t face font-lock-keyword-face) 1596 1597 (fontified t) 1597 1599 (fontified t face font-lock-comment-face) 1599 1603 (fontified t) 1603 1605 (fontified t face font-lock-comment-face) 1605 1610 (fontified t) 1610 1616 (fontified t face font-lock-type-face) 1616 1630 (fontified t) 1630 1633 (fontified t face font-lock-keyword-face) 1633 1644 (fontified t) 1644 1648 (fontified t face font-lock-type-face) 1648 1655 (fontified t) 1655 1668 (fontified t face elixir-atom-face) 1668 1704 (fontified t) 1704 1707 (fontified t face font-lock-keyword-face) 1707 1714 (fontified t) 1714 1716 (fontified t face font-lock-comment-delimiter-face) 1716 1790 (fontified t face font-lock-comment-face) 1790 1806 (fontified t) 1806 1811 (fontified t) 1811 1818 (fontified t) 1818 1822 (fontified t face font-lock-type-face) 1822 1827 (fontified t) 1827 1829 (fontified t face font-lock-keyword-face) 1829 1854 (fontified t) 1854 1855 (syntax-table (15) fontified t face font-lock-string-face) 1855 1867 (fontified t face font-lock-string-face) 1867 1868 (syntax-table (15) fontified t face font-lock-string-face) 1868 1913 (fontified t) 1913 1914 (syntax-table (15) fontified t face font-lock-string-face) 1914 1925 (fontified t face font-lock-string-face) 1925 1926 (syntax-table (15) fontified t face font-lock-string-face) 1926 1970 (fontified t) 1970 1971 (syntax-table (15) fontified t face font-lock-string-face) 1971 1982 (fontified t face font-lock-string-face) 1982 1983 (syntax-table (15) fontified t face font-lock-string-face) 1983 2026 (fontified t) 2026 2027 (syntax-table (15) fontified t face font-lock-string-face) 2027 2036 (fontified t face font-lock-string-face) 2036 2037 (syntax-table (15) fontified t face font-lock-string-face) 2037 2082 (fontified t) 2082 2083 (syntax-table (15) fontified t face font-lock-string-face) 2083 2099 (fontified t face font-lock-string-face) 2099 2100 (syntax-table (15) fontified t face font-lock-string-face) 2100 2141 (fontified t) 2141 2142 (syntax-table (15) fontified t face font-lock-string-face) 2142 2150 (fontified t face font-lock-string-face) 2150 2151 (syntax-table (15) fontified t face font-lock-string-face) 2151 2206 (fontified t) 2206 2221 (fontified t face font-lock-variable-name-face) 2221 2245 (fontified t) 2245 2246 (fontified t syntax-table (15) face font-lock-string-face) 2246 2258 (fontified t face font-lock-string-face) 2258 2259 (fontified t syntax-table (15) face font-lock-string-face) 2259 2293 (fontified t) 2293 2294 (fontified t syntax-table (15) face font-lock-string-face) 2294 2305 (fontified t face font-lock-string-face) 2305 2306 (fontified t syntax-table (15) face font-lock-string-face) 2306 2311 (fontified t) 2311 2329 (fontified t) 2329 2339 (fontified t) 2339 2340 (syntax-table (15) fontified t face font-lock-string-face) 2340 2351 (fontified t face font-lock-string-face) 2351 2352 (syntax-table (15) fontified t face font-lock-string-face) 2352 2384 (fontified t) 2384 2385 (syntax-table (15) fontified t face font-lock-string-face) 2385 2394 (fontified t face font-lock-string-face) 2394 2395 (syntax-table (15) fontified t face font-lock-string-face) 2395 2429 (fontified t) 2429 2430 (syntax-table (15) fontified t face font-lock-string-face) 2430 2446 (fontified t face font-lock-string-face) 2446 2447 (syntax-table (15) fontified t face font-lock-string-face) 2447 2477 (fontified t) 2477 2478 (syntax-table (15) fontified t face font-lock-string-face) 2478 2486 (fontified t face font-lock-string-face) 2486 2487 (syntax-table (15) fontified t face font-lock-string-face) 2487 2550 (fontified t) 2550 2551 (syntax-table (15) fontified t face font-lock-string-face) 2551 2561 (fontified t face font-lock-string-face) 2561 2562 (syntax-table (15) fontified t face font-lock-string-face) 2562 2639 (fontified t) 2639 2651 (fontified t face font-lock-variable-name-face) 2651 2718 (fontified t) 2718 2733 (fontified t face font-lock-variable-name-face) 2733 2744 (fontified t) 2744 2747 (fontified t face font-lock-type-face) 2747 2796 (fontified t) 2796 2799 (fontified t face font-lock-type-face) 2799 2808 (fontified t) 2808 2809 (fontified t syntax-table (15) face font-lock-string-face) 2809 2821 (fontified t face font-lock-string-face) 2821 2822 (fontified t syntax-table (15) face font-lock-string-face) 2822 2824 (fontified t) 2824 2826 (fontified t face font-lock-keyword-face) 2826 2827 (fontified t) 2827 2829 (fontified t face font-lock-comment-face) 2829 2833 (fontified t) 2833 2835 (face font-lock-builtin-face fontified t) 2835 2836 (fontified t) 2836 2855 (face font-lock-string-face fontified t) 2855 2857 (fontified t) 2857 2860 (face font-lock-keyword-face fontified t) 2860 2862 (fontified t) 2862 2869 (fontified t) 2869 2876 (fontified t face font-lock-comment-delimiter-face) 2876 2923 (fontified t face font-lock-comment-face) 2923 2927 (fontified t) 2927 2930 (fontified t face font-lock-keyword-face) 2930 2934 (fontified t) 2934 2937 (fontified t face font-lock-keyword-face) 2937 2938 (fontified t)) . -5406) (undo-tree-id13 . -2938) (undo-tree-id14 . -2938) (undo-tree-id15 . -2932) (undo-tree-id16 . -2932) (undo-tree-id17 . -2923) (undo-tree-id18 . -2923) (undo-tree-id19 . -2863) (undo-tree-id20 . -2863) (undo-tree-id21 . -2862) (undo-tree-id22 . -2862) (undo-tree-id23 . -2785) (undo-tree-id24 . -2785) (undo-tree-id25 . -2736) (undo-tree-id26 . -2736) (undo-tree-id27 . -2712) (undo-tree-id28 . -2712) (undo-tree-id29 . -2654) (undo-tree-id30 . -2654) (undo-tree-id31 . -2633) (undo-tree-id32 . -2633) (undo-tree-id33 . -2632) (undo-tree-id34 . -2632) (undo-tree-id35 . -2564) (undo-tree-id36 . -2564) (undo-tree-id37 . -2522) (undo-tree-id38 . -2522) (undo-tree-id39 . -2512) (undo-tree-id40 . -2512) (undo-tree-id41 . -2467) (undo-tree-id42 . -2467) (undo-tree-id43 . -2419) (undo-tree-id44 . -2419) (undo-tree-id45 . -2374) (undo-tree-id46 . -2374) (undo-tree-id47 . -2329) (undo-tree-id48 . -2329) (undo-tree-id49 . -2283) (undo-tree-id50 . -2283) (undo-tree-id51 . -2235) (undo-tree-id52 . -2235) (undo-tree-id53 . -2711) (undo-tree-id54 . -2711) (undo-tree-id55 . -2224) (undo-tree-id56 . -2224) (undo-tree-id57 . -2176) (undo-tree-id58 . -2938) (undo-tree-id59 . -2938) (undo-tree-id60 . -2200) (undo-tree-id61 . -2200) (undo-tree-id62 . -2176) (undo-tree-id63 . -2176) (undo-tree-id64 . -2678) (undo-tree-id65 . -2678) (undo-tree-id66 . -2938) (undo-tree-id67 . -2938) 8344 (t 25409 34321 6198 281000)) nil (25409 34391 739956 940000) 0 nil])
([nil nil ((#("  def quota_map_fill_up() do
    quota_plan_fill_up = @config[\"PlanCuotasFillupValues\"]
  end

  def concept_quota_map_fill_up() do
    quota_concept_fill_up = @config[\"CuotasConceptoFillupValues\"]
  end
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 23 (fontified t face font-lock-function-name-face) 23 26 (fontified t) 26 28 (fontified t face font-lock-keyword-face) 28 33 (fontified t) 33 51 (fontified t face font-lock-variable-name-face) 51 54 (fontified t) 54 61 (fontified t face elixir-attribute-face) 61 62 (fontified t) 62 63 (syntax-table (15) fontified t face font-lock-string-face) 63 85 (fontified t face font-lock-string-face) 85 86 (syntax-table (15) fontified t face font-lock-string-face) 86 90 (fontified t) 90 93 (fontified t face font-lock-keyword-face) 93 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 118 (fontified t face font-lock-function-name-face) 118 126 (face font-lock-function-name-face fontified t) 126 129 (fontified t) 129 131 (face font-lock-keyword-face fontified t) 131 132 (fontified t) 132 136 (fontified t) 136 157 (fontified t face font-lock-variable-name-face) 157 160 (fontified t) 160 167 (fontified t face elixir-attribute-face) 167 168 (fontified t) 168 169 (syntax-table (15) fontified t face font-lock-string-face) 169 195 (fontified t face font-lock-string-face) 195 196 (syntax-table (15) fontified t face font-lock-string-face) 196 200 (fontified t) 200 203 (fontified t face font-lock-keyword-face) 203 204 (fontified t)) . 6851) (undo-tree-id70 . -204) (undo-tree-id71 . -204) (undo-tree-id72 . -198) (undo-tree-id73 . -198) (undo-tree-id74 . -132) (undo-tree-id75 . -132) (undo-tree-id76 . -95) (undo-tree-id77 . -95) (undo-tree-id78 . -94) (undo-tree-id79 . -94) (undo-tree-id80 . -88) (undo-tree-id81 . -88) (undo-tree-id82 . -204) (undo-tree-id83 . -204) (undo-tree-id84 . -29) (undo-tree-id85 . -29) (undo-tree-id86 . -204) (undo-tree-id87 . -204) (undo-tree-id88 . -204) 7055 (t 25409 34391 749674 541000)) nil (25409 34488 190254 29000) 0 nil])
([nil nil ((6404 . 6406) (#("  " 0 2 (fontified t)) . 6403) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (6402 . 6406)) nil (25409 34488 190213 444000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6609 . 6610) (nil fontified nil 6609 . 6610) (nil fontified nil 6606 . 6609) (nil fontified nil 6602 . 6606) (nil fontified nil 6601 . 6602) (nil fontified nil 6575 . 6601) (nil fontified nil 6574 . 6575) (nil fontified nil 6573 . 6574) (nil fontified nil 6566 . 6573) (nil fontified nil 6563 . 6566) (nil fontified nil 6542 . 6563) (nil fontified nil 6538 . 6542) (nil fontified nil 6537 . 6538) (nil fontified nil 6535 . 6537) (nil fontified nil 6532 . 6535) (nil fontified nil 6524 . 6532) (nil fontified nil 6507 . 6524) (nil fontified nil 6506 . 6507) (nil fontified nil 6503 . 6506) (nil fontified nil 6499 . 6503) (nil fontified nil 6496 . 6499) (nil fontified nil 6492 . 6496) (nil fontified nil 6491 . 6492) (nil fontified nil 6469 . 6491) (nil fontified nil 6468 . 6469) (nil fontified nil 6467 . 6468) (nil fontified nil 6460 . 6467) (nil fontified nil 6457 . 6460) (nil fontified nil 6439 . 6457) (nil fontified nil 6434 . 6439) (nil fontified nil 6432 . 6434) (nil fontified nil 6429 . 6432) (nil fontified nil 6412 . 6429) (nil fontified nil 6411 . 6412) (nil fontified nil 6408 . 6411) (nil fontified nil 6406 . 6408) (6406 . 6610)) nil (25409 34488 190187 676000) 0 nil])
([nil nil ((282 . 284) (#("  " 0 2 (fontified nil)) . 281) (281 . 283) (281 . 282) (t 25409 34488 237058 872000)) nil (25409 36287 370900 111000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -6442) (undo-tree-id113 . -1) (#("u" 0 1 (fontified t)) . -6443) (undo-tree-id114 . -1) (#("o" 0 1 (fontified t)) . -6444) (undo-tree-id115 . -1) (#("t" 0 1 (fontified t)) . -6445) (undo-tree-id116 . -1) (#("a" 0 1 (fontified t)) . -6446) (undo-tree-id117 . -1) (#("_" 0 1 (fontified t)) . -6447) (undo-tree-id118 . -1) (#("p" 0 1 (fontified t)) . -6448) (undo-tree-id119 . -1) (#("l" 0 1 (fontified t)) . -6449) (undo-tree-id120 . -1) (#("a" 0 1 (fontified t)) . -6450) (undo-tree-id121 . -1) (#("n" 0 1 (fontified t)) . -6451) (undo-tree-id122 . -1) (#("_" 0 1 (fontified t)) . -6452) (undo-tree-id123 . -1) (#("f" 0 1 (fontified t)) . -6453) (undo-tree-id124 . -1) (#("i" 0 1 (fontified t)) . -6454) (undo-tree-id125 . -1) (#("l" 0 1 (fontified t)) . -6455) (undo-tree-id126 . -1) (#("l" 0 1 (fontified t)) . -6456) (undo-tree-id127 . -1) (#("_" 0 1 (fontified t)) . -6457) (undo-tree-id128 . -1) (#("u" 0 1 (fontified t)) . -6458) (undo-tree-id129 . -1) (#("p" 0 1 (fontified t)) . -6459) (undo-tree-id130 . -1) (#(" " 0 1 (fontified t)) . -6460) (undo-tree-id131 . -1) (#("=" 0 1 (fontified t)) . -6461) (undo-tree-id132 . -1) (#(" " 0 1 (fontified t)) . -6462) (undo-tree-id133 . -1) 6463 (t 25409 36287 370152 876000)) nil (25409 36310 123859 352000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -6527) (undo-tree-id92 . -1) (#("a" 0 1 (fontified t)) . -6528) (undo-tree-id93 . -1) (#("_" 0 1 (fontified t)) . -6529) (undo-tree-id94 . -1) (#("c" 0 1 (fontified t)) . -6530) (undo-tree-id95 . -1) (#("o" 0 1 (fontified t)) . -6531) (undo-tree-id96 . -1) (#("n" 0 1 (fontified t)) . -6532) (undo-tree-id97 . -1) (#("c" 0 1 (fontified t)) . -6533) (undo-tree-id98 . -1) (#("e" 0 1 (fontified t)) . -6534) (undo-tree-id99 . -1) (#("p" 0 1 (fontified t)) . -6535) (undo-tree-id100 . -1) (#("t" 0 1 (fontified t)) . -6536) (undo-tree-id101 . -1) (#("_" 0 1 (fontified t)) . -6537) (undo-tree-id102 . -1) (#("f" 0 1 (fontified t)) . -6538) (undo-tree-id103 . -1) (#("i" 0 1 (fontified t)) . -6539) (undo-tree-id104 . -1) (#("l" 0 1 (fontified t)) . -6540) (undo-tree-id105 . -1) (#("l" 0 1 (fontified t)) . -6541) (undo-tree-id106 . -1) (#("_" 0 1 (fontified t)) . -6542) (undo-tree-id107 . -1) (#("u" 0 1 (fontified t)) . -6543) (undo-tree-id108 . -1) (#("p" 0 1 (fontified t)) . -6544) (undo-tree-id109 . -1) (#(" " 0 1 (fontified t)) . -6545) (undo-tree-id110 . -1) (#("=" 0 1 (fontified t)) . -6546) (undo-tree-id111 . -1) (#(" " 0 1 (fontified t)) . -6547) (undo-tree-id112 . -1) 6548) nil (25409 36310 123818 275000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -6524) (undo-tree-id89 . -1) (#("u" 0 1 (fontified t)) . -6525) (undo-tree-id90 . -1) (#("o" 0 1 (fontified t)) . -6526) (undo-tree-id91 . -1) 6527) nil (25409 36310 123778 159000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -287) (undo-tree-id137 . -1) 288 (t 25409 36310 130739 928000)) nil (25409 37599 874752 344000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -319) (undo-tree-id136 . -1) 320) nil (25409 37599 874750 190000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -355) (undo-tree-id135 . -1) 356) nil (25409 37599 874747 285000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -402) (undo-tree-id134 . -1) 403) nil (25409 37599 874741 835000) 0 nil])
([nil nil ((1518 . 1519) (t 25409 37599 879121 300000)) nil (25409 40806 777124 937000) 0 nil])
([nil nil ((1563 . 1564)) nil (25409 40806 777122 523000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-face)) . -1563) (undo-tree-id138 . -1) 1564) nil (25409 40806 777118 926000) 0 nil])
([nil nil ((1564 . 1565)) nil (25409 40806 777102 936000) 0 nil])
([nil nil ((1477 . 1478)) nil (25409 40806 777099 750000) 0 nil])
([nil nil ((1016 . 1017)) nil (25409 40806 777092 266000) 0 nil])
([nil nil ((#("      |> IO.inspect()" 0 9 (fontified t) 9 11 (fontified t face font-lock-type-face) 11 21 (fontified t)) . 569) (undo-tree-id144 . -21) (t 25409 40806 797340 985000)) nil (25409 40829 586489 949000) 0 nil])
([nil nil ((#("      # |> parse_incomming_data()" 0 6 (fontified t) 6 8 (fontified t face font-lock-comment-delimiter-face) 8 33 (fontified t face font-lock-comment-face)) . 513) (undo-tree-id143 . -33)) nil (25409 40829 586484 188000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 513) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1)) nil (25409 40829 586474 690000) 0 nil])
([nil nil ((#("    final_map =" 0 4 (fontified t) 4 13 (fontified t face font-lock-variable-name-face) 13 15 (fontified t)) . 464) (undo-tree-id162 . -15) (t 25409 40829 593616 748000)) nil (25409 40857 446542 912000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 464) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1)) nil (25409 40857 446538 284000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 519) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1)) nil (25409 40857 446530 18000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 519) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1)) nil (25409 40857 446521 703000) 0 nil])
([nil nil ((#("    final_map" 0 13 (fontified t)) . 519) (undo-tree-id149 . -13)) nil (25409 40857 446512 976000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 519) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1)) nil (25409 40857 446506 604000) 0 nil])
([nil nil ((519 . 521)) nil (25409 40857 446478 441000) 0 nil])
([nil nil (("
" . -6957) (undo-tree-id167 . -1) ("
" . -6511) (6351 . 6380) (#("    def quota_map_fill_up() do
" 4 7 (face font-lock-keyword-face) 8 25 (face font-lock-function-name-face) 28 30 (face font-lock-keyword-face)) . -6351) (undo-tree-id168 . -2) ("
" . -5354) (5195 . 5273) (#("	  |> Map.update!(\"quota_sec\", fn _x -> _x  |> String.to_integer() end)
" 6 9 (face font-lock-type-face) 18 19 (face font-lock-string-face syntax-table (15)) 19 28 (face font-lock-string-face) 28 29 (face font-lock-string-face syntax-table (15)) 31 33 (face font-lock-keyword-face) 34 36 (face font-lock-comment-face) 40 42 (face font-lock-comment-face) 47 53 (face font-lock-type-face) 67 70 (face font-lock-keyword-face)) . -5195) (1391 . 1516) (#("#        |> put_view(CabbotWeb.QuotaView)
#        |> render(\"show.json\", quota: quota)
#	|> dbg()
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 9 (fontified t face font-lock-comment-delimiter-face) 9 21 (fontified t face font-lock-comment-face) 21 40 (fontified t face font-lock-comment-face) 40 42 (fontified t face font-lock-comment-face) 42 43 (fontified t face font-lock-comment-delimiter-face) 43 51 (fontified t face font-lock-comment-delimiter-face) 51 61 (fontified t face font-lock-comment-face) 61 62 (syntax-table (15) fontified t face font-lock-comment-face) 62 71 (fontified t face font-lock-comment-face) 71 72 (syntax-table (15) fontified t face font-lock-comment-face) 72 74 (fontified t face font-lock-comment-face) 74 80 (fontified t face font-lock-comment-face) 80 87 (fontified t face font-lock-comment-face) 87 88 (fontified t face font-lock-comment-face) 88 89 (fontified t face font-lock-comment-delimiter-face) 89 96 (fontified t face font-lock-comment-face) 96 97 (fontified t face font-lock-comment-face) 97 98 (fontified t face font-lock-comment-face) 98 99 (fontified t face font-lock-comment-face)) . -1391) (undo-tree-id169 . -95) (undo-tree-id170 . -88) (undo-tree-id171 . -88) (undo-tree-id172 . -42) (undo-tree-id173 . -42) (912 . 1040) (#("#        |> put_view(CabbotWeb.ClientsQuotaView)
#        |> render(\"show.json\", clients_quota: clients_quota)
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 9 (fontified t face font-lock-comment-delimiter-face) 9 19 (fontified t face font-lock-comment-face) 19 21 (fontified t face font-lock-comment-face) 21 40 (fontified t face font-lock-comment-face) 40 47 (fontified t face font-lock-comment-face) 47 49 (fontified t face font-lock-comment-face) 49 52 (fontified t face font-lock-comment-delimiter-face) 52 58 (fontified t face font-lock-comment-delimiter-face) 58 68 (fontified t face font-lock-comment-face) 68 69 (syntax-table (15) fontified t face font-lock-comment-face) 69 74 (fontified t face font-lock-comment-face) 74 75 (fontified t face font-lock-comment-face) 75 78 (fontified t face font-lock-comment-face) 78 79 (syntax-table (15) fontified t face font-lock-comment-face) 79 90 (fontified t face font-lock-comment-face) 90 111 (fontified t face font-lock-comment-face)) . -912) (undo-tree-id174 . -111) (undo-tree-id175 . -111) (undo-tree-id176 . -49) (undo-tree-id177 . -49) (453 . 534) (#("      credits_params
      |> hd
      |> parse_maps()
      |> Enum.map(fn quota_map ->
" 0 20 (fontified t) 20 21 (fontified t) 21 33 (fontified t) 33 55 (fontified t) 55 57 (fontified t) 57 64 (fontified t) 64 68 (fontified t face font-lock-type-face) 68 73 (fontified t) 73 75 (fontified t face font-lock-keyword-face) 75 89 (fontified t)) . -453) (undo-tree-id178 . -55) (undo-tree-id179 . -55) (undo-tree-id180 . -33) (undo-tree-id181 . -33) (undo-tree-id182 . -89) (undo-tree-id183 . -89) (undo-tree-id184 . -21) (undo-tree-id185 . -21) (282 . 397) (#("  
    def index(conn, _params) do
      quota = Creditos.list_quota()
      render(conn, \"index.json\", quota: quota)
    end
" 0 3 (fontified t) 3 5 (fontified t) 5 7 (fontified t) 7 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 16 (fontified t face font-lock-function-name-face) 16 23 (fontified t) 23 30 (fontified t face font-lock-comment-face) 30 32 (fontified t) 32 34 (fontified t face font-lock-keyword-face) 34 35 (fontified t) 35 37 (fontified t) 37 41 (fontified t) 41 46 (fontified t face font-lock-variable-name-face) 46 49 (fontified t) 49 57 (fontified t face font-lock-type-face) 57 71 (fontified t) 71 73 (fontified t) 73 77 (fontified t) 77 90 (fontified t) 90 91 (fontified t syntax-table (15) face font-lock-string-face) 91 101 (fontified t face font-lock-string-face) 101 102 (fontified t syntax-table (15) face font-lock-string-face) 102 104 (fontified t) 104 110 (fontified t face elixir-atom-face) 110 118 (fontified t) 118 120 (fontified t) 120 122 (fontified t) 122 125 (fontified t face font-lock-keyword-face) 125 126 (fontified t)) . -282) (t 25409 40857 453952 827000)) nil (25409 40909 102728 393000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -495) (undo-tree-id163 . -1) (#("a" 0 1 (fontified t)) . -496) (undo-tree-id164 . -1) (#("p" 0 1 (fontified t)) . -497) (undo-tree-id165 . -1) (#("s" 0 1 (fontified t)) . -498) (undo-tree-id166 . -1) 499) nil (25409 40909 102688 618000) 0 nil])
([nil nil ((495 . 501)) nil (25409 40909 102660 215000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face font-lock-function-name-face)) . -2204) (undo-tree-id186 . -1) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -2205) (undo-tree-id187 . -1) (#("p" 0 1 (fontified t face font-lock-function-name-face)) . -2206) (undo-tree-id188 . -1) (#("s" 0 1 (fontified t face font-lock-function-name-face)) . -2207) (undo-tree-id189 . -1) 2208 (t 25409 40909 110573 425000)) nil (25409 40924 854718 229000) 0 nil])
([nil nil ((2204 . 2210)) nil (25409 40924 854687 691000) 0 nil])
([nil nil ((399 . 401) (#("  " 0 2 (fontified t)) . 398) (undo-tree-id194 . -2) (398 . 401) (#("  " 0 2 (fontified nil)) . 397) (397 . 399) (397 . 398) (t 25409 40924 898762 471000)) nil (25409 40996 74507 573000) 0 nil])
([nil nil ((399 . 401) (#("  " 0 2 (fontified nil)) . 398) (398 . 400) (398 . 399)) nil (25409 40996 74504 818000) 0 nil])
([nil nil ((401 . 422)) nil (25409 40996 74503 675000) 0 nil])
([nil nil ((422 . 424)) nil (25409 40996 74502 944000) 0 nil])
([nil nil ((424 . 427)) nil (25409 40996 74502 313000) 0 nil])
([nil nil ((427 . 432)) nil (25409 40996 74501 652000) 0 nil])
([nil nil ((432 . 435)) nil (25409 40996 74500 910000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face font-lock-function-name-face)) . -405) (undo-tree-id190 . -1) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -406) (undo-tree-id191 . -1) (#("p" 0 1 (fontified t face font-lock-function-name-face)) . -407) (undo-tree-id192 . -1) (#("_" 0 1 (fontified t face font-lock-function-name-face)) . -408) (undo-tree-id193 . -1) 409) nil (25409 40996 74499 117000) 0 nil])
([nil nil ((405 . 409)) nil (25409 40996 74487 144000) 0 nil])
([nil nil ((427 . 432)) nil (25409 40996 74486 32000) 0 nil])
([nil nil ((432 . 435)) nil (25409 40996 74481 814000) 0 nil])
([nil nil ((435 . 437) (t 25409 40996 75611 412000)) nil (25409 42129 594269 20000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -432) (undo-tree-id221 . -1) (#("o" 0 1 (fontified t face elixir-atom-face)) . -433) (undo-tree-id222 . -1) (#("k" 0 1 (fontified t face elixir-atom-face)) . -434) (undo-tree-id223 . -1) (#("\\" 0 1 (fontified t)) . -435) (undo-tree-id224 . -1) (#("\\" 0 1 (fontified t)) . -436) (undo-tree-id225 . -1) 437) nil (25409 42129 594264 321000) 0 nil])
([nil nil ((423 . 430)) nil (25409 42129 594252 349000) 0 nil])
([nil nil ((430 . 447)) nil (25409 42129 594250 355000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-type-face)) . -437) (undo-tree-id220 . -1) 438) nil (25409 42129 594248 131000) 0 nil])
([nil nil ((446 . 453)) nil (25409 42129 594244 44000) 0 nil])
([nil nil ((#("M" 0 1 (fontified t face font-lock-type-face)) . -423) (undo-tree-id219 . -1) 424) nil (25409 42129 594241 549000) 0 nil])
([nil nil ((423 . 424)) nil (25409 42129 594237 461000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face font-lock-type-face)) . -431) (undo-tree-id218 . -1) 432) nil (25409 42129 594235 97000) 0 nil])
([nil nil ((431 . 432)) nil (25409 42129 594231 119000) 0 nil])
([nil nil ((438 . 439)) nil (25409 42129 594229 166000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t)) . -439) (undo-tree-id217 . -1) 440) nil (25409 42129 594226 761000) 0 nil])
([nil nil ((439 . 440)) nil (25409 42129 594222 413000) 0 nil])
([nil nil ((448 . 449)) nil (25409 42129 594220 430000) 0 nil])
([nil nil ((431 . 432)) nil (25409 42129 594218 436000) 0 nil])
([nil nil ((460 . 465)) nil (25409 42129 594216 773000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -466) (466 . 467) (#("}" 0 1 (fontified nil)) . -466) (466 . 467) (465 . 467)) nil (25409 42129 594213 857000) 0 nil])
([nil nil ((465 . 466)) nil (25409 42129 594210 180000) 0 nil])
([nil nil ((468 . 474) (469 . 473) (#("      " 0 6 (fontified nil)) . 468) (468 . 474) (467 . 469)) nil (25409 42129 594207 716000) 0 nil])
([nil nil ((nil rear-nonsticky nil 488 . 489) (nil fontified nil 488 . 489) (nil fontified nil 475 . 488) (nil fontified nil 474 . 475) (474 . 489)) nil (25409 42129 594203 528000) 0 nil])
([nil nil ((489 . 493)) nil (25409 42129 594199 471000) 0 nil])
([nil nil ((492 . 493)) nil (25409 42129 594197 677000) 0 nil])
([nil nil ((493 . 506)) nil (25409 42129 594195 864000) 0 nil])
([nil nil ((5408 . 5410)) nil (25409 42129 594194 10000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5426) (5426 . 5427) (#(")" 0 1 (fontified nil)) . -5426) (5426 . 5427) (5410 . 5427)) nil (25409 42129 594191 295000) 0 nil])
([nil nil ((5425 . 5426)) nil (25409 42129 594187 648000) 0 nil])
([nil nil ((5427 . 5431)) nil (25409 42129 594185 795000) 0 nil])
([nil nil ((#("M" 0 1 (fontified t face font-lock-type-face)) . -5427) (undo-tree-id213 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -5428) (undo-tree-id214 . -1) (#("p" 0 1 (fontified t face font-lock-type-face)) . -5429) (undo-tree-id215 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -5430) (undo-tree-id216 . -1) 5431) nil (25409 42129 594182 299000) 0 nil])
([nil nil ((5251 . 5253)) nil (25409 42129 594172 220000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5269) (5269 . 5270) (#(")" 0 1 (fontified nil)) . -5269) (5269 . 5270) (5253 . 5270)) nil (25409 42129 594169 4000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -5431) (undo-tree-id195 . -1) (#(">" 0 1 (fontified t)) . -5432) (undo-tree-id196 . -1) (#(" " 0 1 (fontified t)) . -5433) (undo-tree-id197 . -1) (#("M" 0 1 (fontified t face font-lock-type-face)) . -5434) (undo-tree-id198 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -5435) (undo-tree-id199 . -1) (#("p" 0 1 (fontified t face font-lock-type-face)) . -5436) (undo-tree-id200 . -1) (#("." 0 1 (fontified t)) . -5437) (undo-tree-id201 . -1) (#("u" 0 1 (fontified t)) . -5438) (undo-tree-id202 . -1) (#("p" 0 1 (fontified t)) . -5439) (undo-tree-id203 . -1) (#("d" 0 1 (fontified t)) . -5440) (undo-tree-id204 . -1) (#("a" 0 1 (fontified t)) . -5441) (undo-tree-id205 . -1) (#("t" 0 1 (fontified t)) . -5442) (undo-tree-id206 . -1) (#("e" 0 1 (fontified t)) . -5443) (undo-tree-id207 . -1) (#("!" 0 1 (fontified t)) . -5444) (undo-tree-id208 . -1) (#("(" 0 1 (fontified t)) . -5445) (undo-tree-id209 . -1) (#(")" 0 1 (fontified t)) . -5446) (undo-tree-id210 . -1) (undo-tree-id211 . 1) (undo-tree-id212 . -1) 5447) nil (25409 42129 594157 112000) 0 nil])
([nil nil ((5359 . 5360)) nil (25409 42129 594066 863000) 0 nil])
([nil nil ((5280 . 5281)) nil (25409 42129 594059 179000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 514) (undo-tree-id226 . -5) (undo-tree-id227 . -5) (undo-tree-id228 . -5) (undo-tree-id229 . -5) (t 25409 42129 617170 907000)) nil (25409 42160 306105 313000) 0 nil])
([nil nil ((473 . 474)) nil (25409 42160 306082 250000) 0 nil])
([nil nil ((467 . 474)) nil (25409 42160 306078 633000) 0 nil])
([nil nil ((474 . 477)) nil (25409 42160 306071 450000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -474) (undo-tree-id230 . -1) (#("o" 0 1 (fontified t face elixir-atom-face)) . -475) (undo-tree-id231 . -1) (#("k" 0 1 (fontified t face elixir-atom-face)) . -476) (undo-tree-id232 . -1) 477 (t 25409 42160 317026 813000)) nil (25409 42175 147397 366000) 0 nil])
([nil nil ((#("  def fix_null_fields_new({key, value}) do
    :ok
  end
" 0 2 (fontified t) 2 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 25 (fontified t face font-lock-function-name-face) 25 40 (fontified t) 40 42 (fontified t face font-lock-keyword-face) 42 47 (fontified t) 47 50 (fontified t face elixir-atom-face) 50 53 (fontified t) 53 56 (fontified t face font-lock-keyword-face) 56 57 (fontified t)) . -7064) (undo-tree-id235 . -57) (undo-tree-id236 . -57) (undo-tree-id237 . -57) (undo-tree-id238 . -57) 7121 (t 25409 42175 168961 471000)) nil (25409 42269 951542 509000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5363) (undo-tree-id233 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5364) (undo-tree-id234 . -1) 5365) nil (25409 42269 951528 323000) 0 nil])
([nil nil ((5363 . 5365)) nil (25409 42269 951503 166000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5283) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5284) (undo-tree-id255 . -1) 5285 (t 25409 42270 605 667000)) nil (25409 42477 28067 862000) 0 nil])
([nil nil ((5283 . 5284)) nil (25409 42477 28057 943000) 0 nil])
([nil nil ((5272 . 5273) (#("  " 0 2 (fontified t)) . -5256) (5273 . 5274)) nil (25409 42477 28055 709000) 0 nil])
([nil nil ((5273 . 5276)) nil (25409 42477 28052 944000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -5275) (undo-tree-id251 . -1) 5276) nil (25409 42477 28050 620000) 0 nil])
([nil nil ((5275 . 5280)) nil (25409 42477 28046 41000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -5275) (undo-tree-id246 . -1) (#("a" 0 1 (fontified t)) . -5276) (undo-tree-id247 . -1) (#("s" 0 1 (fontified t)) . -5277) (undo-tree-id248 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -5278) (undo-tree-id249 . -1) (#(" " 0 1 (fontified t)) . -5279) (undo-tree-id250 . -1) 5280) nil (25409 42477 28041 733000) 0 nil])
([nil nil ((5256 . 5258)) nil (25409 42477 28026 314000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 5261) (#("(" 0 1 (fontified t)) . 5261) (undo-tree-id244 . 1) (undo-tree-id245 . -1) (#("t" 0 1 (fontified t)) . 5261) (#("c" 0 1 (fontified t)) . 5261) (#("e" 0 1 (fontified t)) . 5261) (#("p" 0 1 (fontified t)) . 5261) (#("s" 0 1 (fontified t)) . 5261) (#("n" 0 1 (fontified t)) . 5261) (#("i" 0 1 (fontified t)) . 5261) (#("." 0 1 (fontified t)) . 5261) (#("O" 0 1 (fontified t face font-lock-type-face)) . 5261) (#("I" 0 1 (fontified t face font-lock-type-face)) . 5261)) nil (25409 42477 28020 533000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5275) (5275 . 5276) (#(")" 0 1 (fontified nil)) . -5275) (5275 . 5276) (5261 . 5276)) nil (25409 42477 28009 974000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -5262) (undo-tree-id240 . -1) (#("s" 0 1 (fontified t)) . -5263) (undo-tree-id241 . -1) (#("e" 0 1 (fontified t)) . -5264) (undo-tree-id242 . -1) (#(" " 0 1 (fontified t)) . -5265) (undo-tree-id243 . -1) 5266) nil (25409 42477 28004 113000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -5261) (undo-tree-id239 . -1) 5262) nil (25409 42477 27855 616000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5289) (5289 . 5290) (#(")" 0 1 (fontified nil)) . -5289) (5289 . 5290) (5275 . 5290)) nil (25409 42477 27833 13000) 0 nil])
([nil nil ((5261 . 5270) (t 25409 42477 48130 928000)) nil (25409 42506 400966 594000) 0 nil])
([nil nil ((5264 . 5265)) nil (25409 42506 400963 709000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -5273) (undo-tree-id258 . -1) (#("." 0 1 (fontified t)) . -5274) (undo-tree-id259 . -1) (#("k" 0 1 (fontified t)) . -5275) (undo-tree-id260 . -1) (#("e" 0 1 (fontified t)) . -5276) (undo-tree-id261 . -1) (#("y" 0 1 (fontified t)) . -5277) (undo-tree-id262 . -1) (#("s" 0 1 (fontified t)) . -5278) (undo-tree-id263 . -1) (#("(" 0 1 (fontified t)) . -5279) (undo-tree-id264 . -1) (#(")" 0 1 (fontified t)) . -5280) (undo-tree-id265 . -1) (undo-tree-id266 . 1) (undo-tree-id267 . -1) 5281) nil (25409 42506 400957 307000) 0 nil])
([nil nil ((#("M" 0 1 (fontified t)) . -5271) (undo-tree-id256 . -1) (#("a" 0 1 (fontified t)) . -5272) (undo-tree-id257 . -1) 5273) nil (25409 42506 400930 46000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5272) (5272 . 5273) (#(")" 0 1 (fontified nil)) . -5272) (5272 . 5273) (5271 . 5273) (t 25409 42506 412090 586000)) nil (25409 42508 635392 659000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5382) (undo-tree-id272 . -1) 5383 (t 25409 42508 648087 746000)) nil (25409 43435 823160 571000) 0 nil])
([nil nil ((280 . 283)) nil (25409 43435 823158 487000) 0 nil])
([nil nil ((nil rear-nonsticky nil 329 . 330) (nil fontified nil 329 . 330) (nil fontified nil 320 . 329) (nil fontified nil 318 . 320) (nil fontified nil 311 . 318) (nil fontified nil 302 . 311) (nil fontified nil 291 . 302) (nil fontified nil 290 . 291) (nil fontified nil 283 . 290) (283 . 330)) nil (25409 43435 823157 425000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -303) (undo-tree-id269 . -1) (#("e" 0 1 (fontified t)) . -304) (undo-tree-id270 . -1) (#("t" 0 1 (fontified t)) . -305) (undo-tree-id271 . -1) 306) nil (25409 43435 823154 460000) 0 nil])
([nil nil ((303 . 305)) nil (25409 43435 823149 471000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -304) (undo-tree-id268 . -1) 305) nil (25409 43435 823148 28000) 0 nil])
([nil nil ((304 . 310)) nil (25409 43435 823136 107000) 0 nil])
([nil nil ((232 . 233)) nil (25409 43435 823131 799000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -5332) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#(">" 0 1 (fontified t)) . -5333) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#(" " 0 1 (fontified t)) . -5334) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#("I" 0 1 (fontified t face font-lock-type-face)) . -5335) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("O" 0 1 (fontified t face font-lock-type-face)) . -5336) (undo-tree-id293 . -1) (#("." 0 1 (fontified t)) . -5337) (undo-tree-id294 . -1) (#("i" 0 1 (fontified t)) . -5338) (undo-tree-id295 . -1) (#("n" 0 1 (fontified t)) . -5339) (undo-tree-id296 . -1) (#("s" 0 1 (fontified t)) . -5340) (undo-tree-id297 . -1) (#("p" 0 1 (fontified t)) . -5341) (undo-tree-id298 . -1) (#("e" 0 1 (fontified t)) . -5342) (undo-tree-id299 . -1) (#("c" 0 1 (fontified t)) . -5343) (undo-tree-id300 . -1) (#("t" 0 1 (fontified t)) . -5344) (undo-tree-id301 . -1) (#("(" 0 1 (fontified t)) . -5345) (undo-tree-id302 . -1) (#(")" 0 1 (fontified t)) . -5346) (undo-tree-id303 . -1) (undo-tree-id304 . 1) (undo-tree-id305 . -1) 5347 (t 25409 43435 826511 86000)) nil (25409 43505 423949 629000) 0 nil])
([nil nil ((#("|> Map.values()" 0 3 (fontified t) 3 6 (fontified t face font-lock-type-face) 6 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 5313) (undo-tree-id284 . -15)) nil (25409 43505 423848 727000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5313) (#("	" 0 1 (fontified t)) . 5313) (#("
" 0 1 (fontified t)) . 5313) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1)) nil (25409 43505 423846 643000) 0 nil])
([nil nil ((#(" 
" 0 1 (fontified t) 1 2 (fontified t)) . 5313) (undo-tree-id275 . -2) (undo-tree-id276 . -2) (undo-tree-id277 . -2) (undo-tree-id278 . -1) (undo-tree-id279 . -2)) nil (25409 43505 423839 79000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5313) (#(" " 0 1 (fontified t)) . 5313) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#(" " 0 1 (fontified t)) . 5313) (#(" " 0 1 (fontified t)) . 5313) (#(" " 0 1 (fontified t)) . 5313) (#(" " 0 1 (fontified t)) . 5313) (#(" " 0 1 (fontified t)) . 5313) (#(" " 0 1 (fontified t)) . 5313) (#(" " 0 1 (fontified t)) . 5313) (#(" " 0 1 (fontified t)) . 5313)) nil (25409 43505 423735 61000) 0 nil])
([nil nil ((#(" # @config Application.get_env(:cabbot, :creditos)" 0 1 (fontified t) 1 3 (fontified t face font-lock-comment-delimiter-face) 3 10 (fontified t face font-lock-comment-face) 10 11 (fontified t face font-lock-comment-face) 11 22 (fontified t face font-lock-comment-face) 22 31 (fontified t face font-lock-comment-face) 31 38 (fontified t face font-lock-comment-face) 38 40 (fontified t face font-lock-comment-face) 40 49 (fontified t face font-lock-comment-face) 49 50 (fontified t face font-lock-comment-face)) . 231) (undo-tree-id310 . -3) (undo-tree-id311 . -2) (undo-tree-id312 . -50) (t 25409 43505 434290 688000)) nil (25409 43529 784977 731000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 231) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1)) nil (25409 43529 784965 278000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 472) (undo-tree-id397 . -7) (undo-tree-id398 . -7) (undo-tree-id399 . -7) (undo-tree-id400 . -6) (t 25409 43529 808923 81000)) nil (25409 45337 764463 10000) 0 nil])
([nil nil ((526 . 528) (#("  " 0 2 (fontified t)) . 525) (undo-tree-id396 . -2) (525 . 528) (#("  " 0 2 (fontified nil)) . -521) (526 . 527)) nil (25409 45337 764452 317000) 0 nil])
([nil nil ((589 . 593) (#("    " 0 4 (fontified t)) . 588) (undo-tree-id394 . -4) (588 . 593) (#("    " 0 4 (fontified t)) . 587) (undo-tree-id395 . -4) (586 . 592)) nil (25409 45337 764446 314000) 0 nil])
([nil nil ((589 . 593) (#("    " 0 4 (fontified nil)) . 588) (588 . 592) (588 . 589)) nil (25409 45337 764439 329000) 0 nil])
([nil nil ((593 . 604)) nil (25409 45337 764436 413000) 0 nil])
([nil nil ((604 . 610)) nil (25409 45337 764434 659000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-function-name-face)) . -413) (undo-tree-id388 . -1) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -414) (undo-tree-id389 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -415) (undo-tree-id390 . -1) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -416) (undo-tree-id391 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -417) (undo-tree-id392 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -418) (undo-tree-id393 . -1) 419) nil (25409 45337 764430 531000) 0 nil])
([nil nil ((413 . 417)) nil (25409 45337 764417 743000) 0 nil])
([nil nil ((417 . 423)) nil (25409 45337 764416 100000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face font-lock-function-name-face)) . -409) (undo-tree-id385 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -410) (undo-tree-id386 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -411) (undo-tree-id387 . -1) 412) nil (25409 45337 764413 94000) 0 nil])
([nil nil ((409 . 414)) nil (25409 45337 764405 828000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t face font-lock-function-name-face)) . -409) (undo-tree-id380 . -1) (#("u" 0 1 (fontified t face font-lock-function-name-face)) . -410) (undo-tree-id381 . -1) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -411) (undo-tree-id382 . -1) (#("l" 0 1 (fontified t face font-lock-function-name-face)) . -412) (undo-tree-id383 . -1) (#("d" 0 1 (fontified t face font-lock-function-name-face)) . -413) (undo-tree-id384 . -1) 414) nil (25409 45337 764401 940000) 0 nil])
([nil nil ((409 . 412)) nil (25409 45337 764391 7000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -601) (undo-tree-id374 . -1) (#("r" 0 1 (fontified t)) . -602) (undo-tree-id375 . -1) (#("e" 0 1 (fontified t)) . -603) (undo-tree-id376 . -1) (#("a" 0 1 (fontified t)) . -604) (undo-tree-id377 . -1) (#("t" 0 1 (fontified t)) . -605) (undo-tree-id378 . -1) (#("e" 0 1 (fontified t)) . -606) (undo-tree-id379 . -1) 607) nil (25409 45337 764386 397000) 0 nil])
([nil nil ((601 . 605)) nil (25409 45337 764372 868000) 0 nil])
([nil nil ((605 . 611)) nil (25409 45337 764371 114000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -619) (619 . 620) (#(")" 0 1 (fontified nil)) . -619) (619 . 620) (618 . 620)) nil (25409 45337 764368 709000) 0 nil])
([nil nil ((#("get_ecto_query_params()" 0 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t)) . 597) (undo-tree-id368 . -23) (undo-tree-id369 . -23) (undo-tree-id370 . 1) (undo-tree-id371 . -23) (undo-tree-id372 . 2) (undo-tree-id373 . -22) 620) nil (25409 45337 764364 280000) 0 nil])
([nil nil ((687 . 693) (#("      " 0 6 (fontified nil)) . 686) (undo-tree-id367 . -6) (685 . 693)) nil (25409 45337 764352 695000) 0 nil])
([nil nil ((687 . 693) (#("      " 0 6 (fontified nil)) . 686) (686 . 692) (686 . 687)) nil (25409 45337 764348 15000) 0 nil])
([nil nil ((nil rear-nonsticky nil 715 . 716) (nil fontified nil 715 . 716) (nil fontified nil 714 . 715) (nil fontified nil 693 . 714) (693 . 716)) nil (25409 45337 764344 328000) 0 nil])
([nil nil ((716 . 723)) nil (25409 45337 764340 950000) 0 nil])
([nil nil ((723 . 726)) nil (25409 45337 764339 307000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t face font-lock-type-face)) . -724) (undo-tree-id365 . -1) (#("I" 0 1 (fontified t face font-lock-type-face)) . -725) (undo-tree-id366 . -1) 726) nil (25409 45337 764336 741000) 0 nil])
([nil nil ((724 . 734)) nil (25409 45337 764331 280000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -737) (737 . 738) (#(")" 0 1 (fontified nil)) . -737) (737 . 738) (734 . 738)) nil (25409 45337 764328 724000) 0 nil])
([nil nil ((715 . 737)) nil (25409 45337 764325 367000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -736) (736 . 737) (#(")" 0 1 (fontified nil)) . -736) (736 . 737)) nil (25409 45337 764322 912000) 0 nil])
([nil nil ((715 . 725)) nil (25409 45337 764319 886000) 0 nil])
([nil nil ((747 . 748)) nil (25409 45337 764318 122000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -747) (undo-tree-id364 . -1) 748) nil (25409 45337 764315 977000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -443) (undo-tree-id343 . -1) (#("i" 0 1 (fontified t)) . -444) (undo-tree-id344 . -1) (#("t" 0 1 (fontified t)) . -445) (undo-tree-id345 . -1) (#("s" 0 1 (fontified t)) . -446) (undo-tree-id346 . -1) (#("_" 0 1 (fontified t)) . -447) (undo-tree-id347 . -1) (#("f" 0 1 (fontified t)) . -448) (undo-tree-id348 . -1) (#("u" 0 1 (fontified t)) . -449) (undo-tree-id349 . -1) (#("n" 0 1 (fontified t)) . -450) (undo-tree-id350 . -1) (#("c" 0 1 (fontified t)) . -451) (undo-tree-id351 . -1) (#("t" 0 1 (fontified t)) . -452) (undo-tree-id352 . -1) (#("i" 0 1 (fontified t)) . -453) (undo-tree-id353 . -1) (#("o" 0 1 (fontified t)) . -454) (undo-tree-id354 . -1) (#("n" 0 1 (fontified t)) . -455) (undo-tree-id355 . -1) (#("," 0 1 (fontified t)) . -456) (undo-tree-id356 . -1) (#(" " 0 1 (fontified t)) . -457) (undo-tree-id357 . -1) (#("p" 0 1 (fontified t)) . -458) (undo-tree-id358 . -1) (#("a" 0 1 (fontified t)) . -459) (undo-tree-id359 . -1) (#("r" 0 1 (fontified t)) . -460) (undo-tree-id360 . -1) (#("a" 0 1 (fontified t)) . -461) (undo-tree-id361 . -1) (#("m" 0 1 (fontified t)) . -462) (undo-tree-id362 . -1) (#("s" 0 1 (fontified t)) . -463) (undo-tree-id363 . -1) 464) nil (25409 45337 764303 822000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -438) (undo-tree-id338 . -1) (#(" " 0 1 (fontified t)) . -439) (undo-tree-id339 . -1) (#("c" 0 1 (fontified t)) . -440) (undo-tree-id340 . -1) (#("r" 0 1 (fontified t)) . -441) (undo-tree-id341 . -1) (#("e" 0 1 (fontified t)) . -442) (undo-tree-id342 . -1) 443) nil (25409 45337 764259 127000) 0 nil])
([nil nil ((434 . 435)) nil (25409 45337 764247 833000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -456) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -457) (undo-tree-id336 . -1) (undo-tree-id337 . -1) 458) nil (25409 45337 764244 846000) 0 nil])
([nil nil ((456 . 467)) nil (25409 45337 764233 602000) 0 nil])
([nil nil ((467 . 471)) nil (25409 45337 764231 959000) 0 nil])
([nil nil ((471 . 473)) nil (25409 45337 764230 275000) 0 nil])
([nil nil ((471 . 472)) nil (25409 45337 764228 522000) 0 nil])
([nil nil ((#("[:ClientsQuota] => %ClientsQuota " 0 1 (fontified t) 1 14 (fontified t face elixir-atom-face) 14 15 (rear-nonsticky t fontified t) 15 19 (fontified t) 19 32 (fontified t face font-lock-type-face) 32 33 (fontified t)) . 474) (undo-tree-id332 . -33) (undo-tree-id333 . -33) 507) nil (25409 45337 764226 36000) 0 nil])
([nil nil ((475 . 476) (456 . 457) (475 . 481) (#("	" 0 1 (fontified nil)) . 474) (474 . 475) (473 . 475)) nil (25409 45337 764220 74000) 0 nil])
([nil nil ((nil rear-nonsticky nil 508 . 509) (nil fontified nil 508 . 509) (nil fontified nil 495 . 508) (nil fontified nil 491 . 495) (nil fontified nil 490 . 491) (nil fontified nil 477 . 490) (nil fontified nil 476 . 477) (476 . 509)) nil (25409 45337 764215 143000) 0 nil])
([nil nil ((508 . 509)) nil (25409 45337 764210 253000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -508) (undo-tree-id331 . -1) 509) nil (25409 45337 764208 28000) 0 nil])
([nil nil ((474 . 476)) nil (25409 45337 764204 160000) 0 nil])
([nil nil ((nil fontified nil 508 . 509) (nil fontified nil 495 . 508) (nil fontified nil 491 . 495) (nil fontified nil 490 . 491) (nil fontified nil 477 . 490) (nil fontified nil 476 . 477) (476 . 509)) nil (25409 45337 764201 334000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face elixir-atom-face)) . -478) (undo-tree-id324 . -1) (#("l" 0 1 (fontified t face elixir-atom-face)) . -479) (undo-tree-id325 . -1) (#("i" 0 1 (fontified t face elixir-atom-face)) . -480) (undo-tree-id326 . -1) (#("e" 0 1 (fontified t face elixir-atom-face)) . -481) (undo-tree-id327 . -1) (#("n" 0 1 (fontified t face elixir-atom-face)) . -482) (undo-tree-id328 . -1) (#("t" 0 1 (fontified t face elixir-atom-face)) . -483) (undo-tree-id329 . -1) (#("s" 0 1 (fontified t face elixir-atom-face)) . -484) (undo-tree-id330 . -1) 485) nil (25409 45337 764194 159000) 0 nil])
([nil nil ((#("%" 0 1 (fontified t face font-lock-type-face)) . -488) (undo-tree-id316 . -1) (#("C" 0 1 (fontified t face font-lock-type-face)) . -489) (undo-tree-id317 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -490) (undo-tree-id318 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -491) (undo-tree-id319 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -492) (undo-tree-id320 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -493) (undo-tree-id321 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -494) (undo-tree-id322 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -495) (undo-tree-id323 . -1) 496) nil (25409 45337 764175 58000) 0 nil])
([nil nil ((488 . 489)) nil (25409 45337 764156 379000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 613) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1)) nil (25409 45337 764148 802000) 0 nil])
([nil nil ((494 . 495) (t 25409 45337 776994 597000)) nil (25409 45346 666803 662000) 0 nil])
([nil nil ((494 . 495) (t 25409 45346 679256 293000)) nil (25409 49687 744558 817000) 0 nil])
([nil nil ((445 . 449) (#("    " 0 4 (fontified t)) . 444) (undo-tree-id415 . -4) (443 . 449)) nil (25409 49687 744555 431000) 0 nil])
([nil nil ((445 . 449) (#("    " 0 4 (fontified nil)) . 444) (444 . 448) (444 . 445)) nil (25409 49687 744549 981000) 0 nil])
([nil nil ((449 . 457)) nil (25409 49687 744546 484000) 0 nil])
([nil nil ((457 . 462)) nil (25409 49687 744544 350000) 0 nil])
([nil nil ((462 . 466)) nil (25409 49687 744542 306000) 0 nil])
([nil nil ((#("%{
      QueryStruct => %{
	[:Quota] => %Quota , 
	[:ClientsQuota] => %ClientsQuota 
      }
    }
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 9 (fontified t) 9 20 (fontified t face font-lock-type-face) 20 25 (fontified t) 25 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 35 (fontified t face elixir-atom-face) 35 36 (rear-nonsticky t fontified t) 36 40 (fontified t) 40 41 (fontified t face font-lock-type-face) 41 46 (fontified t face font-lock-type-face) 46 47 (fontified t) 47 48 (fontified t) 48 49 (rear-nonsticky t fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 65 (fontified t face elixir-atom-face) 65 66 (rear-nonsticky t fontified t) 66 70 (fontified t) 70 83 (fontified t face font-lock-type-face) 83 84 (rear-nonsticky t fontified t) 84 85 (fontified t) 85 91 (fontified t) 91 92 (fontified t) 92 93 (fontified t) 93 97 (fontified t) 97 98 (fontified t) 98 99 (fontified t)) . -476) (undo-tree-id408 . -99) (undo-tree-id409 . -99) (undo-tree-id410 . -3) (undo-tree-id411 . -92) (undo-tree-id412 . -51) (undo-tree-id413 . -28) (undo-tree-id414 . -99) 575) nil (25409 49687 744539 30000) 0 nil])
([nil nil ((471 . 473)) nil (25409 49687 744524 493000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -481) (481 . 482) (#("]" 0 1 (fontified nil)) . -481) (481 . 482) (473 . 482)) nil (25409 49687 744521 778000) 0 nil])
([nil nil ((481 . 484)) nil (25409 49687 744517 690000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face font-lock-type-face)) . -481) (undo-tree-id405 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -482) (undo-tree-id406 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -483) (undo-tree-id407 . -1) 484) nil (25409 49687 744514 154000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -482) (482 . 483) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -482) (482 . 483) (481 . 483) (#("\"" 0 1 (fontified nil syntax-table (15))) . -481) (481 . 482)) nil (25409 49687 744504 255000) 0 nil])
([nil nil ((482 . 492)) nil (25409 49687 744498 525000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 505) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1)) nil (25409 49687 744493 545000) 0 nil])
([nil nil ((708 . 709)) nil (25409 49687 744467 447000) 0 nil])
([nil nil ((473 . 474) (t 25409 49687 768508 558000)) nil (25409 49701 910051 397000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -471) (undo-tree-id429 . -1) (#(">" 0 1 (fontified t)) . -472) (undo-tree-id430 . -1) (#(" " 0 1 (fontified t)) . -473) (undo-tree-id431 . -1) 474 (t 25409 49701 912418 209000)) nil (25409 49792 35138 322000) 0 nil])
([nil nil ((449 . 452)) nil (25409 49792 35134 14000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -450) (undo-tree-id427 . -1) (#("y" 0 1 (fontified t)) . -451) (undo-tree-id428 . -1) 452) nil (25409 49792 35132 461000) 0 nil])
([nil nil ((450 . 455)) nil (25409 49792 35130 247000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -499) (499 . 500) (#("]" 0 1 (fontified nil)) . -499) (499 . 500) (498 . 500)) nil (25409 49792 35128 745000) 0 nil])
([nil nil ((499 . 502)) nil (25409 49792 35126 841000) 0 nil])
([nil nil ((449 . 450)) nil (25409 49792 35125 619000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face elixir-atom-face)) . -449) (undo-tree-id426 . -1) 450) nil (25409 49792 35124 196000) 0 nil])
([nil nil ((502 . 511)) nil (25409 49792 35122 102000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -504) (undo-tree-id419 . -1) (#("S" 0 1 (fontified t face font-lock-type-face)) . -505) (undo-tree-id420 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -506) (undo-tree-id421 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -507) (undo-tree-id422 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -508) (undo-tree-id423 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -509) (undo-tree-id424 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -510) (undo-tree-id425 . -1) 511) nil (25409 49792 35119 678000) 0 nil])
([nil nil ((504 . 518)) nil (25409 49792 35111 913000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 444) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1)) nil (25409 49792 35109 879000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 472) (472 . 476) (472 . 473)) nil (25409 49792 35094 711000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 472) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (t 25409 49792 39964 363000)) nil (25409 49999 941153 961000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 472) (472 . 476) (472 . 473)) nil (25409 49999 941124 677000) 0 nil])
([nil nil ((717 . 718) (t 25409 49999 963577 353000)) nil (25409 50035 66975 241000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -714) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (#("a" 0 1 (fontified t)) . -715) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("p" 0 1 (fontified t)) . -716) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (#("_" 0 1 (fontified t)) . -717) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (#("k" 0 1 (fontified t)) . -718) (undo-tree-id448 . -1) (#("e" 0 1 (fontified t)) . -719) (undo-tree-id449 . -1) (#("y" 0 1 (fontified t)) . -720) (undo-tree-id450 . -1) (#("s" 0 1 (fontified t)) . -721) (undo-tree-id451 . -1) (#(" " 0 1 (fontified t)) . -722) (undo-tree-id452 . -1) (#("=" 0 1 (fontified t)) . -723) (undo-tree-id453 . -1) (#(" " 0 1 (fontified t)) . -724) (undo-tree-id454 . -1) 725 (t 25409 50035 71585 17000)) nil (25409 50264 114658 32000) 0 nil])
([nil nil ((5501 . 5505) (t 25409 50264 128015 957000)) nil (25409 50455 466047 916000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5571 . 5572) (nil fontified nil 5571 . 5572) (nil fontified nil 5568 . 5571) (nil fontified nil 5566 . 5568) (nil fontified nil 5554 . 5566) (nil fontified nil 5548 . 5554) (nil fontified nil 5544 . 5548) (nil fontified nil 5542 . 5544) (nil fontified nil 5538 . 5542) (nil fontified nil 5536 . 5538) (nil fontified nil 5535 . 5536) (nil fontified nil 5533 . 5535) (nil fontified nil 5531 . 5533) (nil fontified nil 5530 . 5531) (nil fontified nil 5523 . 5530) (nil fontified nil 5521 . 5523) (nil fontified nil 5520 . 5521) (nil fontified nil 5511 . 5520) (nil fontified nil 5508 . 5511) (nil fontified nil 5505 . 5508) (5505 . 5572)) nil (25409 50455 466046 283000) 0 nil])
([nil nil ((5433 . 5434)) nil (25409 50455 466042 185000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-comment-face)) . -5537) (undo-tree-id456 . -1) 5538) nil (25409 50455 466040 522000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-comment-face)) . -5542) (undo-tree-id455 . -1) 5543) nil (25409 50455 466035 864000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-comment-face)) . -5389) (undo-tree-id457 . -1) 5390 (t 25409 50455 472755 240000)) nil (25409 50473 772792 237000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -5389) (undo-tree-id458 . -1) (#(" " 0 1 (fontified t)) . -5390) (undo-tree-id459 . -1) 5391 (t 25409 50473 788839 478000)) nil (25409 50489 953626 235000) 0 nil])
([nil nil ((5389 . 5392) (t 25409 50489 964915 553000)) nil (25409 50509 872539 388000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 591) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (t 25409 50509 897011 389000)) nil (25409 50958 209306 755000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 591) (undo-tree-id485 . -4) (undo-tree-id486 . -5) (undo-tree-id487 . -5) (undo-tree-id488 . -5)) nil (25409 50958 209304 141000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 591) (undo-tree-id482 . -5) (undo-tree-id483 . -5) (undo-tree-id484 . -5)) nil (25409 50958 209300 904000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 591) (591 . 595) (591 . 592)) nil (25409 50958 209297 989000) 0 nil])
([nil nil ((#("
      get_ecto_query_params(quota_map |> Map.keys())
      |> IO.inspect()
" 0 1 (fontified t) 1 7 (fontified t) 7 28 (fontified t) 28 29 (fontified t) 29 42 (fontified t) 42 45 (fontified t face font-lock-type-face) 45 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (rear-nonsticky t fontified t) 53 54 (fontified t) 54 63 (fontified t) 63 65 (fontified t face font-lock-type-face) 65 73 (fontified t) 73 74 (fontified t) 74 75 (fontified t) 75 76 (fontified t)) . -675) (undo-tree-id470 . -7) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -54) (undo-tree-id474 . -54) (undo-tree-id475 . -76) (undo-tree-id476 . -76) (undo-tree-id477 . -7) (undo-tree-id478 . -7) (undo-tree-id479 . -76) (undo-tree-id480 . -76) (undo-tree-id481 . -76) 751) nil (25409 50958 209296 266000) 0 nil])
([nil nil ((403 . 404)) nil (25409 50958 209288 361000) 0 nil])
([nil nil ((445 . 446)) nil (25409 50958 209287 690000) 0 nil])
([nil nil ((465 . 466)) nil (25409 50958 209287 49000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 475) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1)) nil (25409 50958 209285 987000) 0 nil])
([nil nil ((475 . 476)) nil (25409 50958 209283 562000) 0 nil])
([nil nil ((523 . 524)) nil (25409 50958 209282 781000) 0 nil])
([nil nil ((#("      
" 0 7 (fontified t)) . 679) (undo-tree-id464 . -7) (undo-tree-id465 . -7) (undo-tree-id466 . -7)) nil (25409 50958 209281 458000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1057) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1)) nil (25409 50958 209243 507000) 0 nil])
([nil nil ((1535 . 1556) (t 25409 50958 223622 161000)) nil (25409 51146 430309 961000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1557) (1557 . 1558) (#(")" 0 1 (fontified nil)) . -1557) (1557 . 1558) (1556 . 1558)) nil (25409 51146 430304 982000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1567) (undo-tree-id504 . -1) 1568 (t 25409 51146 444889 890000)) nil (25409 51249 783849 814000) 0 nil])
([nil nil ((#("|> IO.inspect()" 0 3 (fontified t) 3 5 (fontified t face font-lock-type-face) 5 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 1543) (undo-tree-id497 . -15) (undo-tree-id498 . -15) (undo-tree-id499 . 1) (undo-tree-id500 . -15) (undo-tree-id501 . 2) (undo-tree-id502 . -14) (undo-tree-id503 . -15) 1558) nil (25409 51249 783845 305000) 0 nil])
([nil nil ((1585 . 1586) (#("        " 0 8 (fontified nil)) . -1552) (1592 . 1593)) nil (25409 51249 783834 224000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1600 . 1601) (nil fontified nil 1600 . 1601) (nil fontified nil 1599 . 1600) (nil fontified nil 1591 . 1599) (nil fontified nil 1589 . 1591) (nil fontified nil 1586 . 1589) (1586 . 1601)) nil (25409 51249 783831 169000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1543) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1)) nil (25409 51249 783826 99000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1543) (#(" " 0 1 (fontified t)) . 1543) (#(" " 0 1 (fontified t)) . 1543) (#(" " 0 1 (fontified t)) . 1543) (#(" " 0 1 (fontified t)) . 1543) (#(" " 0 1 (fontified t)) . 1543) (#(" " 0 1 (fontified t)) . 1543) (#(" " 0 1 (fontified t)) . 1543)) nil (25409 51249 783801 864000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1601) (undo-tree-id505 . -1) 1602 (t 25409 51249 805611 974000)) nil (25409 51445 186665 929000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1065) (undo-tree-id507 . -1) 1066 (t 25409 51445 200319 670000)) nil (25409 51452 512764 323000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1121) (undo-tree-id506 . -1) 1122) nil (25409 51452 512750 427000) 0 nil])
([nil nil ((#("	|> IO.inspect()" 0 1 (fontified t) 1 4 (fontified t) 4 6 (fontified t face font-lock-type-face) 6 14 (fontified t) 14 15 (fontified t) 15 16 (rear-nonsticky t fontified t)) . 1574) (undo-tree-id511 . -1) (undo-tree-id512 . -16) (t 25409 51452 524479 166000)) nil (25409 51458 930200 928000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1574) (#(" " 0 1 (fontified t)) . 1574) (#(" " 0 1 (fontified t)) . 1574) (#(" " 0 1 (fontified t)) . 1574) (#(" " 0 1 (fontified t)) . 1574) (#(" " 0 1 (fontified t)) . 1574) (#(" " 0 1 (fontified t)) . 1574) (#(" " 0 1 (fontified t)) . 1574) (#("
" 0 1 (fontified t)) . 1574) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1)) nil (25409 51458 930193 635000) 0 nil])
([nil nil ((1573 . 1575) (t 25409 51458 936617 758000)) nil (25409 51767 337952 953000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1589) (1589 . 1590) (#(")" 0 1 (fontified nil)) . -1589) (1589 . 1590) (1575 . 1590)) nil (25409 51767 337948 74000) 0 nil])
([nil nil ((1066 . 1067)) nil (25409 51767 337942 994000) 0 nil])
([nil nil ((1123 . 1124)) nil (25409 51767 337935 490000) 0 nil])
([nil nil ((#("	|> IO.inspect()" 0 4 (fontified t) 4 6 (fontified t face font-lock-type-face) 6 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t)) . 1576) (t 25409 51767 350339 337000)) nil (25409 52387 457984 721000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1576) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1)) nil (25409 52387 457981 735000) 0 nil])
([nil nil ((#("        # 	|> dbg()" 0 8 (fontified t) 8 10 (fontified t face font-lock-comment-delimiter-face) 10 19 (fontified t face font-lock-comment-face)) . 1621)) nil (25409 52387 457972 588000) 0 nil])
([nil nil ((1183 . 1184) (#(" " 0 1 (fontified t)) . -1122) (1183 . 1184)) nil (25409 52387 457970 3000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1202 . 1203) (nil fontified nil 1194 . 1203) (nil fontified nil 1192 . 1194) (nil fontified nil 1184 . 1192) (1184 . 1203)) nil (25409 52387 457966 527000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1065) (undo-tree-id514 . -1) (#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1066) (undo-tree-id515 . -1) 1067) nil (25409 52387 457961 948000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1120) (undo-tree-id513 . -1) 1121) nil (25409 52387 457954 494000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . 1181) (#(" " 0 1 (fontified t)) . 1181) (#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 1181) (#(" " 0 1 (fontified t)) . 1181) (#(" " 0 1 (fontified t)) . 1181) (#(" " 0 1 (fontified t)) . 1181) (#(" " 0 1 (fontified t)) . 1181) (#(" " 0 1 (fontified t)) . 1181) (#(" " 0 1 (fontified t)) . 1181) (#(" " 0 1 (fontified t)) . 1181) (#(" " 0 1 (fontified t)) . 1181)) nil (25409 52387 457934 326000) 0 nil])
([nil nil ((1181 . 1188)) nil (25409 52387 457922 785000) 0 nil])
([nil nil ((#("process_quota_map(quota_plan_list, loan_code_field)" 0 51 (fontified t)) . 2473) (undo-tree-id537 . -51) (undo-tree-id538 . -51) (undo-tree-id539 . 1) (undo-tree-id540 . -51) (undo-tree-id541 . 34) (undo-tree-id542 . -18) 2524 (t 25409 52387 470616 567000)) nil (25409 52471 367965 737000) 0 nil])
([nil nil ((2545 . 2549)) nil (25409 52471 367956 550000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2599 . 2600) (nil fontified nil 2549 . 2600) (2549 . 2600)) nil (25409 52471 367954 506000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -2474) (undo-tree-id535 . -1) (#("+" 0 1 (fontified t)) . -2475) (undo-tree-id536 . -1) 2476) nil (25409 52471 367950 909000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2468) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1)) nil (25409 52471 367944 457000) 0 nil])
([nil nil ((#("     
" 0 6 (fontified t)) . 2468) (undo-tree-id526 . -6) (undo-tree-id527 . -6) (undo-tree-id528 . -6) (undo-tree-id529 . -4) (undo-tree-id530 . -6)) nil (25409 52471 931048 76000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2468) (#(" " 0 1 (fontified t)) . 2468)) nil (25409 52478 782214 499000) 0 nil] [nil nil ((#("
" 0 1 (fontified t)) . -2467) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) 2468) ((2467 . 2468)) (25409 52471 367920 462000) 0 nil])
([nil nil ((#("process_concept_quota_map(quota_concept_list, loan_code_field)" 0 56 (fontified t) 56 62 (fontified t)) . 2472) (undo-tree-id641 . -62) (undo-tree-id642 . -62) (undo-tree-id643 . 1) (undo-tree-id644 . -62) (undo-tree-id645 . 37) (undo-tree-id646 . -26) (undo-tree-id647 . -62) 2534 (t 25409 52478 807651 686000)) nil (25409 53948 859962 66000) 0 nil])
nil
([nil nil ((2527 . 2531)) nil (25409 53948 859948 381000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2592 . 2593) (nil fontified nil 2587 . 2593) (nil fontified nil 2531 . 2587) (2531 . 2593)) nil (25409 53948 859946 186000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2468) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (#(" " 0 1 (fontified t)) . -2469) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (#(" " 0 1 (fontified t)) . -2470) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (#(" " 0 1 (fontified t)) . -2471) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (#(" " 0 1 (fontified t)) . -2472) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("+" 0 1 (fontified t)) . -2473) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (#("+" 0 1 (fontified t)) . -2474) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (#(" " 0 1 (fontified t)) . -2475) (undo-tree-id639 . -1) (undo-tree-id640 . -1) 2476) nil (25409 53948 859937 931000) 0 nil])
([nil nil ((2468 . 2472)) nil (25409 53948 859900 962000) 0 nil])
([nil nil ((2472 . 2474)) nil (25409 53948 859899 239000) 0 nil])
([nil nil ((2474 . 2479)) nil (25409 53948 859897 345000) 0 nil])
([nil nil ((2479 . 2481)) nil (25409 53948 859895 382000) 0 nil])
([nil nil ((2487 . 2491) (#("    " 0 4 (fontified t)) . 2486) (undo-tree-id616 . -4) (2486 . 2491) (#("    " 0 4 (fontified t)) . 2485) (undo-tree-id617 . -4) (2485 . 2490) (#("    " 0 4 (fontified t)) . 2484) (undo-tree-id618 . -4) (2484 . 2489) (#("    " 0 4 (fontified t)) . 2483) (undo-tree-id619 . -4) (2483 . 2488) (#("    " 0 4 (fontified t)) . 2482) (undo-tree-id620 . -4) (2481 . 2487)) nil (25409 53948 859890 793000) 0 nil])
([nil nil ((#("    fg
    fg
" 0 6 (fontified t) 6 7 (fontified t) 7 13 (fontified t) 13 14 (fontified t)) . -2468) (undo-tree-id601 . -14) (undo-tree-id602 . -14) (undo-tree-id603 . -14) (undo-tree-id604 . -14) (undo-tree-id605 . -7) (undo-tree-id606 . -7) (undo-tree-id607 . 8) (undo-tree-id608 . -6) (undo-tree-id609 . 1) (undo-tree-id610 . -7) (undo-tree-id611 . -13) (undo-tree-id612 . -14) (undo-tree-id613 . -14) (undo-tree-id614 . -14) (undo-tree-id615 . -14) 2482) nil (25409 53948 859875 454000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2468) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . 1) (undo-tree-id595 . 1) (undo-tree-id596 . 1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1)) nil (25409 53948 859848 73000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2468) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . 1) (undo-tree-id584 . 1) (undo-tree-id585 . 1) (undo-tree-id586 . 1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1)) nil (25409 53948 859829 288000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2468) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . 1) (undo-tree-id572 . 1) (undo-tree-id573 . 1) (undo-tree-id574 . 1) (undo-tree-id575 . 1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1)) nil (25409 53948 859809 631000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2468) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . 1) (undo-tree-id559 . 1) (undo-tree-id560 . 1) (undo-tree-id561 . 1) (undo-tree-id562 . 1) (undo-tree-id563 . 1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1)) nil (25409 53948 859784 655000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2468) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . 1) (undo-tree-id547 . 1) (undo-tree-id548 . 1) (undo-tree-id549 . 1) (undo-tree-id550 . 1) (undo-tree-id551 . 1) (undo-tree-id552 . 1) (undo-tree-id553 . -1) (undo-tree-id554 . -1)) nil (25409 53948 859756 252000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-string-face)) . -1608) (undo-tree-id648 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -1609) (undo-tree-id649 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -1610) (undo-tree-id650 . -1) (#("w" 0 1 (fontified t face font-lock-string-face)) . -1611) (undo-tree-id651 . -1) 1612 (t 25409 53948 870647 296000)) nil (25410 9306 878907 219000) 0 nil])
([nil nil ((1608 . 1613)) nil (25410 9306 878878 736000) 0 nil])
([nil nil ((#("Q" 0 1 (fontified t face font-lock-type-face)) . -1578) (undo-tree-id652 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -1579) (undo-tree-id653 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -1580) (undo-tree-id654 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -1581) (undo-tree-id655 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -1582) (undo-tree-id656 . -1) 1583 (t 25410 9306 904092 422000)) nil (25410 10583 675505 458000) 0 nil])
([nil nil ((1578 . 1585)) nil (25410 10583 675487 450000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t face font-lock-type-face)) . -1578) (undo-tree-id657 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -1579) (undo-tree-id658 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -1580) (undo-tree-id659 . -1) (#("d" 0 1 (fontified t face font-lock-type-face)) . -1581) (undo-tree-id660 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -1582) (undo-tree-id661 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -1583) (undo-tree-id662 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -1584) (undo-tree-id663 . -1) 1585 (t 25410 10583 682006 932000)) nil (25410 10668 517896 15000) 0 nil])
([nil nil ((1578 . 1583)) nil (25410 10668 517877 862000) 0 nil])
([nil nil ((646 . 651) (t 25410 10668 519847 73000)) nil (25410 10723 205654 247000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -665) (665 . 666) (#(")" 0 1 (fontified nil)) . -665) (665 . 666) (651 . 666)) nil (25410 10723 205644 234000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -1208) (undo-tree-id664 . -1) (#(">" 0 1 (fontified t)) . -1209) (undo-tree-id665 . -1) (#(" " 0 1 (fontified t)) . -1210) (undo-tree-id666 . -1) (#("d" 0 1 (fontified t)) . -1211) (undo-tree-id667 . -1) (#("b" 0 1 (fontified t)) . -1212) (undo-tree-id668 . -1) (#("g" 0 1 (fontified t)) . -1213) (undo-tree-id669 . -1) (#("(" 0 1 (fontified t)) . -1214) (undo-tree-id670 . -1) (#(")" 0 1 (rear-nonsticky t fontified t)) . -1215) (undo-tree-id671 . -1) (undo-tree-id672 . 1) (undo-tree-id673 . -1) 1216 (t 25410 10723 223226 322000)) nil (25410 17723 778088 370000) 0 nil])
([nil nil ((1625 . 1631) (t 25410 17723 804207 696000)) nil (25410 18623 173522 842000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t face elixir-atom-face)) . -1639) (undo-tree-id674 . -1) 1640 (t 25410 18623 177547 817000)) nil (25410 18627 431304 411000) 0 nil])
([nil nil ((1639 . 1640)) nil (25410 18627 431288 452000) 0 nil])
([nil nil ((1652 . 1654) (t 25410 18627 481539 250000)) nil (25410 18745 979464 338000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1696 . 1697) (nil fontified nil 1690 . 1697) (nil fontified nil 1685 . 1690) (nil fontified nil 1684 . 1685) (nil fontified nil 1682 . 1684) (nil fontified nil 1681 . 1682) (nil fontified nil 1665 . 1681) (nil fontified nil 1664 . 1665) (nil fontified nil 1654 . 1664) (1654 . 1697)) nil (25410 18745 979460 781000) 0 nil])
([nil nil ((1663 . 1668)) nil (25410 18745 979454 840000) 0 nil])
([nil nil ((183 . 185) (#("  " 0 2 (fontified nil)) . 182) (182 . 184) (182 . 183)) nil (25410 18745 979452 566000) 0 nil])
([nil nil ((70 . 72) (#("  " 0 2 (fontified nil)) . 69) (69 . 71) (69 . 70)) nil (25410 18745 979448 418000) 0 nil])
([nil nil ((69 . 82)) nil (25410 18745 979444 782000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -71) (undo-tree-id675 . -1) (#("s" 0 1 (fontified t)) . -72) (undo-tree-id676 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -73) (undo-tree-id677 . -1) (#(" " 0 1 (fontified t)) . -74) (undo-tree-id678 . -1) (#("P" 0 1 (fontified t face font-lock-type-face)) . -75) (undo-tree-id679 . -1) (#("h" 0 1 (fontified t face font-lock-type-face)) . -76) (undo-tree-id680 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -77) (undo-tree-id681 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -78) (undo-tree-id682 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -79) (undo-tree-id683 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -80) (undo-tree-id684 . -1) (#("x" 0 1 (fontified t face font-lock-type-face)) . -81) (undo-tree-id685 . -1) 82) nil (25410 18745 979437 368000) 0 nil])
([nil nil ((71 . 82)) nil (25410 18745 979398 74000) 0 nil])
([nil nil ((82 . 90)) nil (25410 18745 979390 991000) 0 nil])
([nil nil ((1684 . 1693) (t 25410 18746 5613 104000)) nil (25410 19730 637085 726000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -1692) (undo-tree-id686 . -1) 1693) nil (25410 19730 637081 198000) 0 nil])
([nil nil ((1692 . 1697)) nil (25410 19730 637067 181000) 0 nil])
([nil nil ((90 . 102)) nil (25410 19730 637061 280000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -90) (undo-tree-id687 . -1) (#("r" 0 1 (fontified t)) . -91) (undo-tree-id688 . -1) (#("e" 0 1 (fontified t)) . -92) (undo-tree-id689 . -1) (#("n" 0 1 (fontified t)) . -93) (undo-tree-id690 . -1) (#("d" 0 1 (fontified t)) . -94) (undo-tree-id691 . -1) (#("e" 0 1 (fontified t)) . -95) (undo-tree-id692 . -1) (#("r" 0 1 (fontified t)) . -96) (undo-tree-id693 . -1) (#("_" 0 1 (fontified t)) . -97) (undo-tree-id694 . -1) (#("m" 0 1 (fontified t)) . -98) (undo-tree-id695 . -1) (#("a" 0 1 (fontified t)) . -99) (undo-tree-id696 . -1) (#("n" 0 1 (fontified t)) . -100) (undo-tree-id697 . -1) (#("y" 0 1 (fontified t)) . -101) (undo-tree-id698 . -1) 102 (t 25410 19730 654694 829000)) nil (25410 19746 603799 271000) 0 nil])
([nil nil ((#("import Phoenix.View" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 14 (fontified t face font-lock-type-face) 14 19 (fontified t face font-lock-type-face)) . 71) (undo-tree-id699 . -19) (t 25410 19746 610995 762000)) nil (25410 19752 146650 261000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-string-face)) . -1628) (undo-tree-id702 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1629) (undo-tree-id703 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -1630) (undo-tree-id704 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -1631) (undo-tree-id705 . -1) (#("x" 0 1 (fontified t face font-lock-string-face)) . -1632) (undo-tree-id706 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -1633) (undo-tree-id707 . -1) (#("q" 0 1 (fontified t face font-lock-string-face)) . -1634) (undo-tree-id708 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -1635) (undo-tree-id709 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -1636) (undo-tree-id710 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -1637) (undo-tree-id711 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -1638) (undo-tree-id712 . -1) 1639 (t 25410 19752 175135 629000)) nil (25410 52431 531263 593000) 0 nil])
([nil nil ((1628 . 1632)) nil (25410 52431 531251 931000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1654) (undo-tree-id700 . -1) (undo-tree-id701 . -1) 1655) nil (25410 52431 531250 258000) 0 nil])
([nil nil ((1654 . 1655)) nil (25410 52431 531237 804000) 0 nil])
([nil nil ((1655 . 1663)) nil (25410 52431 531236 412000) 0 nil])
([nil nil ((1662 . 1663)) nil (25410 52431 531231 983000) 0 nil])
([nil nil ((1632 . 1633) (t 25410 52431 576745 106000)) nil (25410 52714 132173 196000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t face font-lock-string-face)) . -1632) (undo-tree-id713 . -1) 1633 (t 25410 52714 160631 187000)) nil (25410 52720 573789 526000) 0 nil])
([nil nil ((#("Q" 0 1 (fontified t face elixir-atom-face)) . -1640) (undo-tree-id714 . -1) 1641 (t 25410 52720 588717 721000)) nil (25410 52723 277603 32000) 0 nil])
([nil nil ((1640 . 1641)) nil (25410 52723 277580 530000) 0 nil])
([nil nil ((#("#  def get_ecto_query_params(map_keys) do
#    key = map_keys
#    |>hd
#    @config[\"TableNames\"][key|>Atom.to_string]
#      end
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 3 (fontified t face font-lock-comment-delimiter-face) 3 6 (fontified t face font-lock-comment-face) 6 7 (fontified t face font-lock-comment-face) 7 10 (fontified t face font-lock-comment-face) 10 21 (fontified t face font-lock-comment-face) 21 28 (fontified t face font-lock-comment-face) 28 30 (fontified t face font-lock-comment-face) 30 37 (fontified t face font-lock-comment-face) 37 39 (fontified t face font-lock-comment-face) 39 41 (fontified t face font-lock-comment-face) 41 42 (fontified t face font-lock-comment-face) 42 43 (fontified t face font-lock-comment-delimiter-face) 43 47 (fontified t face font-lock-comment-delimiter-face) 47 50 (fontified t face font-lock-comment-face) 50 61 (fontified t face font-lock-comment-face) 61 62 (fontified t face font-lock-comment-face) 62 63 (fontified t face font-lock-comment-delimiter-face) 63 67 (fontified t face font-lock-comment-delimiter-face) 67 71 (fontified t face font-lock-comment-face) 71 72 (fontified t face font-lock-comment-face) 72 73 (fontified t face font-lock-comment-delimiter-face) 73 77 (fontified t face font-lock-comment-delimiter-face) 77 84 (fontified t face font-lock-comment-face) 84 85 (fontified t face font-lock-comment-face) 85 86 (syntax-table (15) fontified t face font-lock-comment-face) 86 96 (fontified t face font-lock-comment-face) 96 97 (syntax-table (15) fontified t face font-lock-comment-face) 97 98 (fontified t face font-lock-comment-face) 98 104 (fontified t face font-lock-comment-face) 104 108 (fontified t face font-lock-comment-face) 108 118 (fontified t face font-lock-comment-face) 118 119 (fontified t face font-lock-comment-face) 119 120 (fontified t face font-lock-comment-face) 120 121 (fontified t face font-lock-comment-delimiter-face) 121 125 (fontified t face font-lock-comment-delimiter-face) 125 127 (fontified t face font-lock-comment-delimiter-face) 127 130 (fontified t face font-lock-comment-face) 130 131 (fontified t face font-lock-comment-face)) . -411) (undo-tree-id724 . -42) (undo-tree-id725 . -42) (undo-tree-id726 . -120) (undo-tree-id727 . -120) (undo-tree-id728 . -131) (undo-tree-id729 . -131) (undo-tree-id730 . -62) (undo-tree-id731 . -62) (undo-tree-id732 . -72) (undo-tree-id733 . -72) (undo-tree-id734 . -131) (undo-tree-id735 . -131) (undo-tree-id736 . -131) (undo-tree-id737 . -131) 542 (t 25410 52723 304754 267000)) nil (25410 59401 266910 881000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 410) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1)) nil (25410 59401 266899 500000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 410) (undo-tree-id715 . -3) (undo-tree-id716 . -3) (undo-tree-id717 . -3) (undo-tree-id718 . -3)) nil (25410 59401 266892 267000) 0 nil])
([nil nil ((469 . 473) (#("    " 0 4 (fontified nil)) . 468) (468 . 472) (468 . 469) (t 25410 59401 272262 101000)) nil (25410 59511 64130 749000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 468) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . 1) (undo-tree-id747 . -1)) nil (25410 59511 64125 119000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 468) (undo-tree-id738 . -5) (undo-tree-id739 . -5) (undo-tree-id740 . -5) (undo-tree-id741 . 5) (undo-tree-id742 . -5)) nil (25410 59511 64109 119000) 0 nil])
([nil nil ((571 . 572) (t 25410 59511 95334 887000)) nil (25410 60899 574737 306000) 0 nil])
([nil nil ((627 . 628)) nil (25410 60899 574736 104000) 0 nil])
([nil nil ((681 . 682)) nil (25410 60899 574735 292000) 0 nil])
([nil nil ((726 . 727)) nil (25410 60899 574734 681000) 0 nil])
([nil nil ((752 . 753)) nil (25410 60899 574734 50000) 0 nil])
([nil nil ((784 . 785)) nil (25410 60899 574733 168000) 0 nil])
([nil nil ((806 . 807)) nil (25410 60899 574732 277000) 0 nil])
([nil nil ((829 . 835) (#("      " 0 6 (fontified nil)) . 828) (undo-tree-id751 . -6) (828 . 835) (#("      " 0 6 (fontified nil)) . 827) (undo-tree-id752 . -6) (827 . 834) (#("      " 0 5 (fontified nil) 5 6 (fontified nil)) . 826) (undo-tree-id753 . -6) (832 . 833) (#("  " 0 2 (fontified t)) . -832) (#("      " 0 6 (fontified nil face font-lock-comment-face)) . 825) (825 . 831) (825 . 826)) nil (25410 60899 574730 303000) 0 nil])
([nil nil ((826 . 833)) nil (25410 60899 574723 440000) 0 nil])
([nil nil ((nil rear-nonsticky nil 880 . 881) (nil fontified nil 873 . 881) (nil fontified nil 870 . 873) (nil fontified nil 852 . 870) (nil fontified nil 839 . 852) (nil fontified nil 837 . 839) (nil fontified nil 833 . 837) (833 . 881)) nil (25410 60899 574722 548000) 0 nil])
([nil nil ((#("," 0 1 (fontified t rear-nonsticky t)) . -880) (undo-tree-id750 . -1) 881) nil (25410 60899 574720 424000) 0 nil])
([nil nil ((880 . 883)) nil (25410 60899 574718 801000) 0 nil])
([nil nil ((883 . 884) (#(" " 0 1 (fontified nil)) . -832) (undo-tree-id749 . -1) (883 . 884)) nil (25410 60899 574717 940000) 0 nil])
([nil nil ((887 . 888)) nil (25410 60899 574716 96000) 0 nil])
([nil nil ((899 . 900)) nil (25410 60899 574715 445000) 0 nil])
([nil nil ((932 . 933)) nil (25410 60899 574714 824000) 0 nil])
([nil nil ((1019 . 1020)) nil (25410 60899 574714 273000) 0 nil])
([nil nil ((1075 . 1076)) nil (25410 60899 574713 622000) 0 nil])
([nil nil ((882 . 884)) nil (25410 60899 574712 730000) 0 nil])
([nil nil ((882 . 884)) nil (25410 60899 574711 949000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1130 . 1131) (nil fontified nil 1130 . 1131) (nil fontified nil 1128 . 1130) (nil fontified nil 1126 . 1128) (nil fontified nil 1123 . 1126) (nil fontified nil 1115 . 1123) (nil fontified nil 1113 . 1115) (nil fontified nil 1112 . 1113) (nil fontified nil 1106 . 1112) (nil fontified nil 1097 . 1106) (nil fontified nil 1096 . 1097) (nil fontified nil 1093 . 1096) (nil fontified nil 1091 . 1093) (nil fontified nil 1090 . 1091) (nil fontified nil 1089 . 1090) (nil fontified nil 1084 . 1089) (nil fontified nil 1080 . 1084) (nil fontified nil 1079 . 1080) (nil fontified nil 1078 . 1079) (nil fontified nil 1077 . 1078) (nil fontified nil 1074 . 1077) (nil fontified nil 1073 . 1074) (nil fontified nil 1067 . 1073) (nil fontified nil 1059 . 1067) (nil fontified nil 1058 . 1059) (nil fontified nil 1048 . 1058) (nil fontified nil 1033 . 1048) (nil fontified nil 1032 . 1033) (nil fontified nil 1023 . 1032) (nil fontified nil 1018 . 1023) (nil fontified nil 1009 . 1018) (nil fontified nil 1001 . 1009) (nil fontified nil 990 . 1001) (nil fontified nil 988 . 990) (nil fontified nil 987 . 988) (nil fontified nil 964 . 987) (nil fontified nil 951 . 964) (nil fontified nil 949 . 951) (nil fontified nil 946 . 949) (nil fontified nil 945 . 946) (nil fontified nil 935 . 945) (nil fontified nil 934 . 935) (nil fontified nil 933 . 934) (nil fontified nil 924 . 933) (nil fontified nil 921 . 924) (nil fontified nil 903 . 921) (nil fontified nil 890 . 903) (nil fontified nil 888 . 890) (nil fontified nil 884 . 888) (884 . 1131)) nil (25410 60899 574709 374000) 0 nil])
([nil nil ((#("	with [:ClientsQuota] <- quota_map |> Map.keys()," 0 1 (fontified t) 1 5 (fontified t face font-lock-keyword-face) 5 7 (fontified t) 7 20 (fontified t face elixir-atom-face) 20 38 (fontified t) 38 41 (fontified t face font-lock-type-face) 41 49 (fontified t)) . 883) (undo-tree-id748 . -1)) nil (25410 60899 574701 329000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 884)) nil (25410 60899 574691 19000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 937)) nil (25410 60899 574690 348000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 981)) nil (25410 60899 574689 697000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 1006)) nil (25410 60899 574688 996000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 1037)) nil (25410 60899 574688 224000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 1058)) nil (25410 60899 574686 591000) 0 nil])
([nil nil ((966 . 971)) nil (25410 60899 574682 453000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1082) (undo-tree-id764 . -2) (undo-tree-id765 . -2) (undo-tree-id766 . -1) (undo-tree-id767 . -2) (undo-tree-id768 . -1) (t 25410 60899 577868 441000)) nil (25410 60962 563616 713000) 0 nil])
([nil nil ((#("	
" 0 1 (fontified t) 1 2 (fontified t)) . 1082) (undo-tree-id761 . -2) (undo-tree-id762 . -2) (undo-tree-id763 . -2)) nil (25410 60962 563612 886000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1082) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1)) nil (25410 60962 563609 790000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1082) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1)) nil (25410 60962 563574 214000) 0 nil])
([nil nil ((1356 . 1362) (1348 . 1352) (#("      " 0 6 (fontified nil)) . 1348) (1357 . 1358)) nil (25410 60962 563561 941000) 0 nil])
([nil nil ((1360 . 1361) (#(")" 0 1 (fontified nil)) . -1360) (1360 . 1361)) nil (25410 60962 563559 727000) 0 nil])
([nil nil ((1360 . 1363)) nil (25410 60962 563555 88000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1360) (undo-tree-id769 . -1) (#("n" 0 1 (fontified t)) . -1361) (undo-tree-id770 . -1) (#("d" 0 1 (fontified t face font-lock-keyword-face)) . -1362) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (#(")" 0 1 (fontified t)) . -1363) (undo-tree-id773 . -1) (undo-tree-id774 . 1) (undo-tree-id775 . -1) 1364 (t 25410 60962 606219 715000)) nil (25410 60985 28353 879000) 0 nil])
([nil nil ((#("           {:ok, %ClientsQuota{} = clients_quota} <-" 0 1 (fontified t) 1 11 (fontified t) 11 12 (fontified t) 12 15 (fontified t face elixir-atom-face) 15 17 (fontified t) 17 30 (fontified t face font-lock-type-face) 30 52 (fontified t)) . 884) (t 25410 60985 46346 289000)) nil (25410 61023 596181 482000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1024) (undo-tree-id776 . -1) (undo-tree-id777 . 1) (undo-tree-id778 . -1) (#(" " 0 1 (fontified t)) . -1025) (undo-tree-id779 . -1) (#("d" 0 1 (fontified t)) . -1026) (undo-tree-id780 . -1) (#("o" 0 1 (fontified t face font-lock-keyword-face)) . -1027) (undo-tree-id781 . -1) 1028) nil (25410 61023 596177 134000) 0 nil])
([nil nil ((1024 . 1025) (t 25410 61023 614565 525000)) nil (25410 61040 295882 350000) 0 nil])
([nil nil ((1024 . 1025) (#(")" 0 1 (fontified nil)) . -1024) (1024 . 1025)) nil (25410 61040 295873 122000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 883) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (t 25410 61040 322661 130000)) nil (25410 61450 950076 917000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 883) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1)) nil (25410 61450 950074 201000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1025) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1)) nil (25410 61450 950071 767000) 0 nil])
([nil nil ((#("process_quota_map(quota_plan_list, loan_code_field)" 0 50 (fontified t) 50 51 (rear-nonsticky t fontified t)) . 2643) (undo-tree-id790 . -51) (undo-tree-id791 . -51) (undo-tree-id792 . 1) (undo-tree-id793 . -51) (undo-tree-id794 . 34) (undo-tree-id795 . -18) (undo-tree-id796 . -51) 2694) nil (25410 61450 950068 721000) 0 nil])
([nil nil ((2709 . 2713)) nil (25410 61450 950061 577000) 0 nil])
([nil nil ((nil fontified nil 2763 . 2764) (nil fontified nil 2713 . 2763) (2713 . 2764)) nil (25410 61450 950060 264000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2643) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (#("+" 0 1 (fontified t)) . -2644) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (#("+" 0 1 (fontified t)) . -2645) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (#(" " 0 1 (fontified t)) . -2646) (undo-tree-id788 . -1) (undo-tree-id789 . -1) 2647) nil (25410 61450 950055 645000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -912) (undo-tree-id806 . -1) (#("a" 0 1 (fontified t)) . -913) (undo-tree-id807 . -1) (#("n" 0 1 (fontified t)) . -914) (undo-tree-id808 . -1) (#("y" 0 1 (fontified t)) . -915) (undo-tree-id809 . -1) (#("_" 0 1 (fontified t)) . -916) (undo-tree-id810 . -1) 917 (t 25410 61450 966860 851000)) nil (25410 61637 989120 877000) 0 nil])
([nil nil ((6273 . 6278) (t 25410 61638 11437 347000)) nil (25410 63785 216592 740000) 0 nil])
([nil nil ((6278 . 6281)) nil (25410 63785 216591 618000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -6278) (undo-tree-id814 . -1) (#(">" 0 1 (fontified t)) . -6279) (undo-tree-id815 . -1) (#(" " 0 1 (fontified t)) . -6280) (undo-tree-id816 . -1) 6281) nil (25410 63785 216590 336000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -6278) (6278 . 6279) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -6278) (6278 . 6279) (6277 . 6279) (#("\"" 0 1 (fontified nil syntax-table (15))) . -6277) (6273 . 6278)) nil (25410 63785 216586 218000) 0 nil])
([nil nil ((6278 . 6288)) nil (25410 63785 216584 605000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6294) (#(" " 0 1 (fontified t)) . 6294) (#(" " 0 1 (fontified t)) . 6294) (#(" " 0 1 (fontified t)) . 6294) (#("
" 0 1 (fontified t)) . 6294) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1)) nil (25410 63785 216582 441000) 0 nil])
([nil nil ((6347 . 6348)) nil (25410 63785 216569 778000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6358 . 6359) (nil fontified nil 6348 . 6359) (6348 . 6359)) nil (25410 63785 216566 201000) 0 nil])
([nil nil ((6389 . 6394) (t 25410 63785 221939 841000)) nil (25410 63825 544915 263000) 0 nil])
([nil nil ((6394 . 6405)) nil (25410 63825 544912 909000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -6404) (undo-tree-id818 . -1) 6405) nil (25410 63825 544910 454000) 0 nil])
([nil nil ((6404 . 6407)) nil (25410 63825 544905 856000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -6406) (undo-tree-id817 . -1) 6407) nil (25410 63825 544902 49000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6408) (6408 . 6409) (#(")" 0 1 (fontified nil)) . -6408) (6408 . 6409) (6406 . 6409)) nil (25410 63825 544879 737000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-comment-face)) . -5501) (undo-tree-id821 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -5502) (undo-tree-id822 . -1) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -5503) (undo-tree-id823 . -1) 5504 (t 25410 63825 573267 501000)) nil (25410 64293 424492 605000) 0 nil])
([nil nil ((5501 . 5513)) nil (25410 64293 424483 769000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5477) (undo-tree-id819 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5478) (undo-tree-id820 . -1) 5479) nil (25410 64293 424479 20000) 0 nil])
([nil nil ((5477 . 5478)) nil (25410 64293 424453 102000) 0 nil])
([nil nil ((5461 . 5462) (t 25410 64293 450457 230000)) nil (25410 65313 183839 348000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t face font-lock-builtin-face)) . -5440) (undo-tree-id824 . -1) 5441) nil (25410 65313 183834 589000) 0 nil])
([nil nil ((5440 . 5441)) nil (25410 65313 183812 497000) 0 nil])
([nil nil ((#("<> \"00:00:00 Z\"" 0 3 (fontified t) 3 4 (syntax-table (15) fontified t face font-lock-string-face) 4 14 (fontified t face font-lock-string-face) 14 15 (syntax-table (15) fontified t face font-lock-string-face)) . 6283) (undo-tree-id829 . -15) (undo-tree-id830 . -15) (undo-tree-id831 . -15) 6298 (t 25410 65313 237054 381000)) nil (25410 65383 954144 963000) 0 nil])
([nil nil ((6283 . 6287) (#(" " 0 1 (fontified t)) . 6282) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (6283 . 6284)) nil (25410 65383 954136 737000) 0 nil])
([nil nil ((6287 . 6295)) nil (25410 65383 954128 732000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -6294) (undo-tree-id825 . -1) 6295) nil (25410 65383 954124 964000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6301) (6301 . 6302) (#(")" 0 1 (fontified nil)) . -6301) (6301 . 6302) (6294 . 6302)) nil (25410 65383 954103 303000) 0 nil])
([nil nil ((#("|> Map.update!(\"quota_delayed_days\", fn _x -> _x |> String.to_integer() end)" 0 3 (fontified t) 3 6 (fontified t face font-lock-type-face) 6 15 (fontified t) 15 16 (syntax-table (15) fontified t face font-lock-string-face) 16 18 (fontified t face font-lock-string-face) 18 34 (fontified t face font-lock-string-face) 34 35 (syntax-table (15) fontified t face font-lock-string-face) 35 37 (fontified t) 37 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 42 (fontified t face font-lock-comment-face) 42 46 (fontified t) 46 48 (fontified t face font-lock-comment-face) 48 52 (fontified t) 52 58 (fontified t face font-lock-type-face) 58 69 (fontified t) 69 70 (fontified t) 70 72 (fontified t) 72 75 (fontified t face font-lock-keyword-face) 75 76 (fontified t)) . 5479) (undo-tree-id833 . -76) (undo-tree-id834 . -76) (undo-tree-id835 . 1) (undo-tree-id836 . -76) (undo-tree-id837 . 62) (undo-tree-id838 . -15) 5555 (t 25410 65383 971807 993000)) nil (25410 65455 65330 435000) 0 nil])
([nil nil ((3974 . 3982)) nil (25410 65455 65317 570000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4057 . 4058) (nil fontified nil 4057 . 4058) (nil fontified nil 4054 . 4057) (nil fontified nil 4052 . 4054) (nil fontified nil 4051 . 4052) (nil fontified nil 4040 . 4051) (nil fontified nil 4034 . 4040) (nil fontified nil 4030 . 4034) (nil fontified nil 4028 . 4030) (nil fontified nil 4024 . 4028) (nil fontified nil 4022 . 4024) (nil fontified nil 4021 . 4022) (nil fontified nil 4019 . 4021) (nil fontified nil 4017 . 4019) (nil fontified nil 4016 . 4017) (nil fontified nil 4000 . 4016) (nil fontified nil 3998 . 4000) (nil fontified nil 3997 . 3998) (nil fontified nil 3988 . 3997) (nil fontified nil 3985 . 3988) (nil fontified nil 3982 . 3985) (3982 . 4058)) nil (25410 65455 65313 352000) 0 nil])
([nil nil ((3967 . 3968)) nil (25410 65455 65302 402000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t face font-lock-builtin-face)) . -3946) (undo-tree-id832 . -1) 3947) nil (25410 65455 65298 43000) 0 nil])
([nil nil ((3946 . 3947)) nil (25410 65455 65276 532000) 0 nil])
([nil nil ((6504 . 6509) (t 25410 65455 118364 937000)) nil (25411 994 619243 759000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6523) (6523 . 6524) (#(")" 0 1 (fontified nil)) . -6523) (6523 . 6524) (6509 . 6524)) nil (25411 994 619233 500000) 0 nil])
([nil nil ((6661 . 6662) (t 25411 994 635815 217000)) nil (25411 1061 694029 604000) 0 nil])
([nil nil ((#("!" 0 1 (fontified t)) . -6661) (undo-tree-id839 . -1) 6662 (t 25411 1061 713021 746000)) nil (25411 1066 989642 786000) 0 nil])
([nil nil ((#("process_concept_quota_map(quota_concept_list, loan_code_field)" 0 56 (fontified t) 56 61 (fontified t) 61 62 (rear-nonsticky t fontified t)) . 2638) (undo-tree-id848 . -62) (undo-tree-id849 . -62) (undo-tree-id850 . 1) (undo-tree-id851 . -62) (undo-tree-id852 . 37) (undo-tree-id853 . -26) 2700 (t 25411 1067 9116 225000)) nil (25411 2042 710603 776000) 0 nil])
([nil nil ((2693 . 2697)) nil (25411 2042 710586 774000) 0 nil])
([nil nil ((nil fontified nil 2758 . 2759) (nil fontified nil 2753 . 2758) (nil fontified nil 2697 . 2753) (2697 . 2759)) nil (25411 2042 710583 368000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2638) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (#("+" 0 1 (fontified t)) . -2639) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (#("+" 0 1 (fontified t)) . -2640) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (#(" " 0 1 (fontified t)) . -2641) (undo-tree-id846 . -1) (undo-tree-id847 . -1) 2642) nil (25411 2042 710572 167000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6761) (6761 . 6762) (#(")" 0 1 (fontified nil)) . -6761) (6761 . 6762) (6747 . 6762) (t 25411 2042 728238 281000)) nil (25411 2447 587022 466000) 0 nil])
([nil nil ((1003 . 1012) (t 25411 2447 593817 273000)) nil (25411 3710 533740 350000) 0 nil])
([nil nil ((1012 . 1015)) nil (25411 3710 533739 478000) 0 nil])
([nil nil ((1015 . 1025)) nil (25411 3710 533738 667000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1021) (undo-tree-id854 . -1) (#("p" 0 1 (fontified t)) . -1022) (undo-tree-id855 . -1) (#("c" 0 1 (fontified t)) . -1023) (undo-tree-id856 . -1) (#("t" 0 1 (fontified t)) . -1024) (undo-tree-id857 . -1) 1025) nil (25411 3710 533736 843000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1026) (1026 . 1027) (#(")" 0 1 (fontified nil)) . -1026) (1026 . 1027) (1021 . 1027)) nil (25411 3710 533720 883000) 0 nil])
([nil nil ((1003 . 1012) (t 25411 3710 540535 485000)) nil (25411 3826 44833 683000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1025) (1025 . 1026) (#(")" 0 1 (fontified nil)) . -1025) (1025 . 1026) (1012 . 1026)) nil (25411 3826 44827 952000) 0 nil])
([nil nil ((1025 . 1028)) nil (25411 3826 44818 274000) 0 nil])
([nil nil ((912 . 917) (t 25411 3826 74043 152000)) nil (25411 4582 72737 747000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -912) (undo-tree-id858 . -1) (#("a" 0 1 (fontified t)) . -913) (undo-tree-id859 . -1) (#("n" 0 1 (fontified t)) . -914) (undo-tree-id860 . -1) (#("y" 0 1 (fontified t)) . -915) (undo-tree-id861 . -1) (#("_" 0 1 (fontified t)) . -916) (undo-tree-id862 . -1) 917 (t 25411 4582 102325 365000)) nil (25411 4618 763024 473000) 0 nil])
([nil nil ((1011 . 1012) (t 25411 4618 782791 721000)) nil (25411 4873 402864 89000) 0 nil])
([nil nil ((1038 . 1039)) nil (25411 4873 402859 851000) 0 nil])
([nil nil ((#("quota_map
               |> Map.values()
               |> hd" 0 10 (fontified t) 10 18 (fontified t) 18 24 (fontified t) 24 25 (fontified t) 25 28 (fontified t) 28 29 (fontified t face font-lock-type-face) 29 30 (fontified t face font-lock-type-face) 30 31 (fontified t face font-lock-type-face) 31 35 (fontified t) 35 40 (fontified t) 40 41 (fontified t) 41 43 (fontified t) 43 46 (fontified t) 46 47 (fontified t) 47 56 (fontified t) 56 61 (fontified t)) . 942) (undo-tree-id890 . -10) (undo-tree-id891 . -10) (undo-tree-id892 . -41) (undo-tree-id893 . -41) (undo-tree-id894 . -61) (undo-tree-id895 . -41) (undo-tree-id896 . -61) (undo-tree-id897 . -41) (undo-tree-id898 . -61) 1003 (t 25411 4873 422107 539000)) nil (25411 5582 221803 325000) 0 nil])
([nil nil ((884 . 885) (#("        " 0 2 (fontified nil) 2 8 (fontified nil)) . 883) (undo-tree-id886 . -8) (undo-tree-id887 . -8) (#("     " 0 5 (fontified t)) . -891) (undo-tree-id888 . -5) (undo-tree-id889 . -5) (896 . 897)) nil (25411 5582 221785 852000) 0 nil])
([nil nil ((883 . 885)) nil (25411 5582 221775 823000) 0 nil])
([nil nil ((886 . 895)) nil (25411 5582 221773 940000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -895) (undo-tree-id885 . -1) 896) nil (25411 5582 221771 696000) 0 nil])
([nil nil ((895 . 900)) nil (25411 5582 221767 979000) 0 nil])
([nil nil ((884 . 885) (#("	" 0 1 (fontified nil)) . 883) (883 . 884) (#("  " 0 2 (fontified t)) . 883) (undo-tree-id883 . -2) (undo-tree-id884 . -2) (885 . 886)) nil (25411 5582 221765 83000) 0 nil])
([nil nil ((885 . 891)) nil (25411 5582 221758 351000) 0 nil])
([nil nil ((nil rear-nonsticky nil 951 . 952) (nil fontified nil 947 . 952) (nil fontified nil 938 . 947) (nil fontified nil 937 . 938) (nil fontified nil 934 . 937) (nil fontified nil 932 . 934) (nil fontified nil 931 . 932) (nil fontified nil 926 . 931) (nil fontified nil 922 . 926) (nil fontified nil 921 . 922) (nil fontified nil 920 . 921) (nil fontified nil 919 . 920) (nil fontified nil 916 . 919) (nil fontified nil 915 . 916) (nil fontified nil 909 . 915) (nil fontified nil 901 . 909) (nil fontified nil 891 . 901) (891 . 952)) nil (25411 5582 221754 513000) 0 nil])
([nil nil ((952 . 960)) nil (25411 5582 221745 777000) 0 nil])
([nil nil ((975 . 978)) nil (25411 5582 221744 94000) 0 nil])
([nil nil ((976 . 977)) nil (25411 5582 221742 381000) 0 nil])
([nil nil ((975 . 976)) nil (25411 5582 221740 237000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -977) (undo-tree-id882 . -1) 978) nil (25411 5582 221736 469000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 960) (undo-tree-id863 . 1) (#(" " 0 1 (fontified t)) . 960) (undo-tree-id864 . 1) (#(" " 0 1 (fontified t)) . 960) (undo-tree-id865 . 1) (#(" " 0 1 (fontified t)) . 960) (undo-tree-id866 . 1) (#(" " 0 1 (fontified t)) . 960) (undo-tree-id867 . 1) (#(" " 0 1 (fontified t)) . 960) (undo-tree-id868 . 1) (#(" " 0 1 (fontified t)) . 960) (undo-tree-id869 . 1) (#(" " 0 1 (fontified t)) . 960) (undo-tree-id870 . 1) (#(" " 0 1 (fontified t)) . 960) (undo-tree-id871 . 1) (#(" " 0 1 (fontified t)) . 960) (undo-tree-id872 . 1) (#(" " 0 1 (fontified t)) . 960) (undo-tree-id873 . 1) (#(" " 0 1 (fontified t)) . 960) (undo-tree-id874 . 1) (#(" " 0 1 (fontified t)) . 960) (undo-tree-id875 . 1) (#(" " 0 1 (fontified t)) . 960) (undo-tree-id876 . 1) (#("
" 0 1 (fontified t)) . 960) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . 1) (undo-tree-id881 . -1)) nil (25411 5582 221721 301000) 0 nil])
([nil nil ((#("|> IO.inspect()" 0 3 (fontified t) 3 5 (face font-lock-type-face fontified t) 5 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 6355) (t 25411 5582 251739 639000)) nil (25411 5697 186761 548000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6355) (#(" " 0 1 (fontified t)) . 6355) (#(" " 0 1 (fontified t)) . 6355) (#(" " 0 1 (fontified t)) . 6355) (#("
" 0 1 (fontified t)) . 6355) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1)) nil (25411 5697 186756 819000) 0 nil])
([nil nil ((#("|> IO.inspect()" 0 3 (fontified t) 3 5 (fontified t face font-lock-type-face) 5 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 6455) (undo-tree-id905 . -15) (undo-tree-id906 . -15) (t 25411 5697 213329 160000)) nil (25411 5704 644278 311000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6455) (#(" " 0 1 (fontified t)) . 6455) (#(" " 0 1 (fontified t)) . 6455) (#(" " 0 1 (fontified t)) . 6455) (#("
" 0 1 (fontified t)) . 6455) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1)) nil (25411 5704 644265 56000) 0 nil])
([nil nil ((#("|> IO.inspect()" 0 3 (fontified t) 3 5 (fontified t face font-lock-type-face) 5 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 6528) (undo-tree-id910 . -15) (t 25411 5704 665432 340000)) nil (25411 5710 48343 872000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6528) (#(" " 0 1 (fontified t)) . 6528) (#(" " 0 1 (fontified t)) . 6528) (#(" " 0 1 (fontified t)) . 6528) (#("
" 0 1 (fontified t)) . 6528) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1)) nil (25411 5710 48333 1000) 0 nil])
([nil nil ((6762 . 6769) (t 25411 5710 69507 175000)) nil (25411 6088 927836 25000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -6776) (6776 . 6777) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -6776) (6776 . 6777) (6775 . 6777) (#("\"" 0 1 (fontified nil syntax-table (15))) . -6775) (6769 . 6776)) nil (25411 6088 927833 430000) 0 nil])
([nil nil ((6776 . 6786)) nil (25411 6088 927828 10000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -6769) (undo-tree-id913 . -1) (#(">" 0 1 (fontified t)) . -6770) (undo-tree-id914 . -1) (#(" " 0 1 (fontified t)) . -6771) (undo-tree-id915 . -1) 6772 (t 25411 6088 932993 383000)) nil (25411 6290 963675 865000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((#("<> \"00:00:00 Z\"" 0 3 (fontified t) 3 4 (fontified t syntax-table (15) face font-lock-string-face) 4 14 (fontified t face font-lock-string-face) 14 15 (fontified t syntax-table (15) face font-lock-string-face)) . 6769) (undo-tree-id984 . -15)) nil (25411 6299 248703 571000) 0 nil] [nil nil ((#("<> \"00:00:00 Z\"" 0 3 (fontified t) 3 4 (fontified t syntax-table (15) face font-lock-string-face) 4 14 (fontified t face font-lock-string-face) 14 15 (fontified t syntax-table (15) face font-lock-string-face)) . 6769)) ((6769 . 6784)) (25411 6290 411578 694000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((883 . 888) (t 25411 6299 278039 785000)) nil (25411 30304 184964 454000) 0 nil])
([nil nil ((6384 . 6389)) ((#("v <> " 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 6384) (undo-tree-id982 . -5) (undo-tree-id983 . -5)) (25411 6283 990388 972000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((884 . 885) (#("	" 0 1 (fontified nil)) . 883) (883 . 884) (#("     " 0 5 (fontified t)) . 883) (undo-tree-id1000 . -5) (undo-tree-id1001 . -5) (888 . 889)) nil (25411 30304 184963 222000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6403 . 6404) (6389 . 6404)) ((#("<> \"00:00:00 Z\"" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil syntax-table (15) face font-lock-string-face) 4 5 (fontified nil face font-lock-string-face) 5 6 (fontified nil face font-lock-string-face) 6 7 (fontified nil face font-lock-string-face) 7 8 (fontified nil face font-lock-string-face) 8 9 (fontified nil face font-lock-string-face) 9 10 (fontified nil face font-lock-string-face) 10 11 (fontified nil face font-lock-string-face) 11 12 (fontified nil face font-lock-string-face) 12 13 (fontified nil face font-lock-string-face) 13 14 (fontified nil face font-lock-string-face) 14 15 (fontified nil rear-nonsticky nil syntax-table (15) face font-lock-string-face)) . 6389) (nil rear-nonsticky t 6403 . 6404)) (25411 6278 12611 205000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((884 . 885) (#("	" 0 1 (fontified nil)) . 883) (883 . 884) (883 . 884)) nil (25411 30304 184960 727000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . 6386)) ((6386 . 6387)) (25411 6277 689435 964000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil nil ((6404 . 6408)) ((#(" |> " 0 4 (fontified t)) . 6404)) (25411 6176 862058 720000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("
" 0 1 (fontified t)) . -883) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . 1) (undo-tree-id998 . -1) (#("	" 0 1 (fontified t)) . -884) (undo-tree-id999 . -1) 885) nil (25411 30304 184959 164000) 0 nil])
([nil nil ((6386 . 6387)) ((#("|" 0 1 (fontified t)) . 6386)) (25411 6275 423580 741000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("<" 0 1 (fontified t)) . -6389) (undo-tree-id916 . -1) (#(">" 0 1 (fontified t)) . -6390) (undo-tree-id917 . -1) (#(" " 0 1 (fontified t)) . -6391) (undo-tree-id918 . -1) 6392 (t 25411 6155 655860 596000)) ((6389 . 6392) (t 25411 6169 451651 17000)) (25411 6169 422501 372000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((883 . 888)) nil (25411 30304 184953 753000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -6386) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (#(">" 0 1 (fontified t)) . -6387) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (#(" " 0 1 (fontified t)) . -6388) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) 6389) ((6386 . 6389)) (25411 6275 210275 360000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
nil
([nil nil ((884 . 885) (#("	" 0 1 (fontified nil)) . 883) (883 . 884) (#("     " 0 5 (fontified t)) . 883) (undo-tree-id991 . -5) (undo-tree-id992 . -5) (888 . 889)) nil (25411 30304 184952 701000) 0 nil])
([nil nil ((6401 . 6405) (t 25411 6200 803203 911000)) ((#(" |> " 0 1 (fontified t) 1 4 (fontified t)) . 6401)) (25411 6274 959649 467000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("	" 0 1 (fontified t)) . -884) (undo-tree-id990 . -1) 885) nil (25411 30304 184949 885000) 0 nil])
([nil nil ((6390 . 6391) (t 25411 6206 283129 787000)) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 6390) (t 25411 6237 322731 539000)) (25411 6274 787830 261000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((884 . 890)) nil (25411 30304 184948 51000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -6386) (undo-tree-id948 . -1) (#(">" 0 1 (fontified t)) . -6387) (undo-tree-id949 . -1) (#(" " 0 1 (fontified t)) . -6388) (undo-tree-id950 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -6389) (undo-tree-id951 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -6390) (undo-tree-id952 . -1) (#("0" 0 1 (fontified t face font-lock-string-face)) . -6391) (undo-tree-id953 . -1) (#("0" 0 1 (fontified t face font-lock-string-face)) . -6392) (undo-tree-id954 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -6393) (undo-tree-id955 . -1) (#("0" 0 1 (fontified t face font-lock-string-face)) . -6394) (undo-tree-id956 . -1) (#("0" 0 1 (fontified t face font-lock-string-face)) . -6395) (undo-tree-id957 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -6396) (undo-tree-id958 . -1) (#("0" 0 1 (fontified t face font-lock-string-face)) . -6397) (undo-tree-id959 . -1) (#("0" 0 1 (fontified t face font-lock-string-face)) . -6398) (undo-tree-id960 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -6399) (undo-tree-id961 . -1) (#("Z" 0 1 (fontified t face font-lock-string-face)) . -6400) (undo-tree-id962 . -1) (#("\"" 0 1 (fontified t rear-nonsticky t syntax-table (15) face font-lock-string-face)) . -6401) (undo-tree-id963 . -1) (#(" " 0 1 (fontified t)) . -6402) (undo-tree-id964 . -1) 6403 (t 25411 6237 322731 539000)) ((6386 . 6403)) (25411 6274 194141 730000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 995 . 996) (nil fontified nil 890 . 996) (890 . 996)) nil (25411 30304 184947 39000) 0 nil])
nil
([nil nil ((#("d" 0 1 (fontified t)) . -902) (undo-tree-id985 . -1) (#("a" 0 1 (fontified t)) . -903) (undo-tree-id986 . -1) (#("t" 0 1 (fontified t)) . -904) (undo-tree-id987 . -1) (#("a" 0 1 (fontified t)) . -905) (undo-tree-id988 . -1) (#("2" 0 1 (fontified t)) . -906) (undo-tree-id989 . -1) 907) nil (25411 30304 184944 213000) 0 nil])
([nil nil ((902 . 911)) nil (25411 30304 184926 698000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1001) (undo-tree-id1006 . -1) 1002 (t 25411 30304 202011 89000)) nil (25411 30326 755455 368000) 0 nil])
([nil nil ((1019 . 1020) (#(")" 0 1 (fontified nil)) . -1019) (1019 . 1020) (1001 . 1020)) nil (25411 30326 755450 308000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . -1017) (undo-tree-id1005 . -1) 1018) nil (25411 30326 755446 470000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -1018) (undo-tree-id1002 . -1) (undo-tree-id1003 . 1) (undo-tree-id1004 . -1) 1019) nil (25411 30326 755439 606000) 0 nil])
([nil nil ((1018 . 1027)) nil (25411 30326 755417 391000) 0 nil])
([nil nil ((519 . 520)) nil (25411 30326 755409 806000) 0 nil])
([nil nil ((1001 . 1002) (#(")" 0 1 (fontified nil)) . -1001) (1001 . 1002) (t 25411 30326 777575 62000)) nil (25411 30356 859233 235000) 0 nil])
([nil nil ((885 . 886) (t 25411 30356 866130 14000)) nil (25411 30432 363964 350000) 0 nil])
([nil nil ((1005 . 1006) (#("      " 0 6 (fontified t)) . 1005) (#("	" 0 1 (fontified nil face font-lock-comment-face)) . 1004) (1004 . 1005) (1004 . 1005)) nil (25411 30432 363962 918000) 0 nil])
([nil nil ((1005 . 1006)) nil (25411 30432 363961 776000) 0 nil])
([nil nil ((1040 . 1041) (#("      " 0 6 (fontified nil)) . -1030) (undo-tree-id1013 . -6) (1045 . 1046)) nil (25411 30432 363960 744000) 0 nil])
([nil nil ((1041 . 1043)) nil (25411 30432 363959 52000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -1041) (undo-tree-id1011 . -1) (#("c" 0 1 (fontified t)) . -1042) (undo-tree-id1012 . -1) 1043) nil (25411 30432 363957 991000) 0 nil])
([nil nil ((1041 . 1042)) nil (25411 30432 363955 988000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -1041) (undo-tree-id1010 . -1) 1042) nil (25411 30432 363954 966000) 0 nil])
([nil nil ((1041 . 1043)) nil (25411 30432 363953 574000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -1041) (undo-tree-id1008 . -1) (#("v" 0 1 (fontified t)) . -1042) (undo-tree-id1009 . -1) 1043) nil (25411 30432 363952 433000) 0 nil])
([nil nil ((1041 . 1053)) nil (25411 30432 363949 879000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1052) (undo-tree-id1007 . -1) 1053) nil (25411 30432 363948 497000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1055) (1055 . 1056) (#(")" 0 1 (fontified nil)) . -1055) (1055 . 1056) (1052 . 1056)) nil (25411 30432 363935 299000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -1040) (1040 . 1041) (#("]" 0 1 (fontified nil)) . -1040) (1040 . 1041) (1039 . 1041) (t 25411 30432 381650 708000)) nil (25411 30456 493191 396000) 0 nil])
([nil nil ((1040 . 1053)) nil (25411 30456 493182 31000) 0 nil])
([nil nil ((#("quota_map[:ClientsQuota]
	|> IO.inspect()
        " 0 3 (fontified t) 3 9 (fontified t) 9 10 (fontified t) 10 23 (fontified t face elixir-atom-face) 23 24 (fontified t) 24 25 (fontified t) 25 29 (fontified t) 29 31 (fontified t face font-lock-type-face) 31 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 50 (fontified t)) . -1030) (undo-tree-id1017 . -42) (undo-tree-id1018 . -42) (undo-tree-id1019 . -25) (undo-tree-id1020 . -25) (undo-tree-id1021 . -50) (undo-tree-id1022 . -42) (undo-tree-id1023 . -50) 1080 (t 25411 30456 524333 160000)) nil (25411 30555 318458 786000) 0 nil])
([nil nil ((#("       " 0 6 (fontified t) 6 7 (fontified t)) . -1030) (#("	" 0 1 (fontified nil)) . 1029) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (1030 . 1031)) nil (25411 30555 318452 225000) 0 nil])
([nil nil ((1030 . 1045)) nil (25411 30555 318440 884000) 0 nil])
([nil nil ((1030 . 1031) (#("	" 0 1 (fontified nil face font-lock-comment-face)) . 1029) (1029 . 1030) (1029 . 1030)) nil (25411 30555 318439 392000) 0 nil])
([nil nil ((1031 . 1043)) nil (25411 30555 318437 789000) 0 nil])
([nil nil ((1043 . 1047)) nil (25411 30555 318433 411000) 0 nil])
([nil nil ((1030 . 1031) (t 25411 30555 334775 954000)) nil (25411 30642 816098 262000) 0 nil])
([nil nil ((1049 . 1050)) nil (25411 30642 816097 401000) 0 nil])
([nil nil ((1081 . 1082)) nil (25411 30642 816096 780000) 0 nil])
([nil nil ((1102 . 1103)) nil (25411 30642 816096 48000) 0 nil])
([nil nil ((1104 . 1105)) nil (25411 30642 816094 646000) 0 nil])
([nil nil ((1215 . 1216)) nil (25411 30642 816090 249000) 0 nil])
([nil nil ((#("#      new_data2 = quota_map |> Enum.map(fn x -> x[:Quota] |> Map.new(fn {k,v} -> {k |> String.to_atom(),v}  end) end)

#	IO.inspect(new_data2)
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 7 (fontified t face font-lock-comment-delimiter-face) 7 16 (fontified t face font-lock-comment-face) 16 32 (fontified t face font-lock-comment-face) 32 36 (fontified t face font-lock-comment-face) 36 41 (fontified t face font-lock-comment-face) 41 43 (fontified t face font-lock-comment-face) 43 51 (fontified t face font-lock-comment-face) 51 57 (fontified t face font-lock-comment-face) 57 62 (fontified t face font-lock-comment-face) 62 65 (fontified t face font-lock-comment-face) 65 70 (fontified t face font-lock-comment-face) 70 72 (fontified t face font-lock-comment-face) 72 88 (fontified t face font-lock-comment-face) 88 94 (fontified t face font-lock-comment-face) 94 109 (fontified t face font-lock-comment-face) 109 112 (fontified t face font-lock-comment-face) 112 114 (fontified t face font-lock-comment-face) 114 116 (fontified t face font-lock-comment-face) 116 117 (rear-nonsticky t fontified t face font-lock-comment-face) 117 118 (fontified t face font-lock-comment-face) 118 119 (fontified t face font-lock-comment-face) 119 120 (fontified t) 120 121 (fontified t face font-lock-comment-delimiter-face) 121 122 (fontified t face font-lock-comment-face) 122 124 (fontified t face font-lock-comment-face) 124 132 (fontified t face font-lock-comment-face) 132 142 (fontified t face font-lock-comment-face) 142 143 (fontified t face font-lock-comment-face) 143 144 (fontified t face font-lock-comment-face)) . 885) (undo-tree-id1035 . -144) (undo-tree-id1036 . -144) (undo-tree-id1037 . -144) (undo-tree-id1038 . -144) (undo-tree-id1039 . -144) (undo-tree-id1040 . -120) (undo-tree-id1041 . -120) (undo-tree-id1042 . -119) (undo-tree-id1043 . -119) (undo-tree-id1044 . -7) (undo-tree-id1045 . -144) (undo-tree-id1046 . -144) (undo-tree-id1047 . -144) (undo-tree-id1048 . -144) 1029 (t 25411 30642 834833 474000)) nil (25411 30729 776497 32000) 0 nil])
([nil nil ((833 . 839) (#("      " 0 6 (fontified nil)) . 832) (undo-tree-id1034 . -6) (832 . 839) (807 . 813) (825 . 826)) nil (25411 30729 776469 514000) 0 nil])
([nil nil ((nil rear-nonsticky nil 982 . 983) (nil fontified nil 982 . 983) (nil fontified nil 981 . 982) (nil fontified nil 971 . 981) (nil fontified nil 963 . 971) (nil fontified nil 961 . 963) (nil fontified nil 960 . 961) (nil fontified nil 959 . 960) (nil fontified nil 958 . 959) (nil fontified nil 957 . 958) (nil fontified nil 956 . 957) (nil fontified nil 955 . 956) (nil fontified nil 953 . 955) (nil fontified nil 951 . 953) (nil fontified nil 948 . 951) (nil fontified nil 933 . 948) (nil fontified nil 927 . 933) (nil fontified nil 911 . 927) (nil fontified nil 909 . 911) (nil fontified nil 904 . 909) (nil fontified nil 901 . 904) (nil fontified nil 896 . 901) (nil fontified nil 890 . 896) (nil fontified nil 882 . 890) (nil fontified nil 880 . 882) (nil fontified nil 875 . 880) (nil fontified nil 871 . 875) (nil fontified nil 855 . 871) (nil fontified nil 846 . 855) (nil fontified nil 840 . 846) (nil fontified nil 839 . 840) (839 . 983)) nil (25411 30729 776460 287000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -959) (undo-tree-id1033 . -1) 960) nil (25411 30729 776444 860000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -837) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (#(" " 0 1 (fontified t)) . -838) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -839) (undo-tree-id1032 . -1) 840) nil (25411 30729 776437 988000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -835) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (#(" " 0 1 (fontified t)) . -836) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) 837) nil (25411 30729 776420 177000) 0 nil])
([nil nil ((861 . 867) (#(" " 0 1 (fontified nil)) . 860) (undo-tree-id1058 . -1) (#("  " 0 2 (fontified nil)) . -839) (863 . 864) (t 25411 30729 795506 954000)) nil (25411 30768 779147 632000) 0 nil])
([nil nil ((867 . 879)) nil (25411 30768 779142 573000) 0 nil])
([nil nil ((879 . 880)) nil (25411 30768 779140 750000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -879) (undo-tree-id1057 . -1) 880) nil (25411 30768 779138 25000) 0 nil])
([nil nil ((887 . 888) (#(" " 0 1 (fontified nil)) . 886) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (#("            " 0 12 (fontified t)) . -867) (899 . 900)) nil (25411 30768 779133 86000) 0 nil])
([nil nil ((888 . 889) (#("	" 0 1 (fontified nil)) . 887) (undo-tree-id1054 . -1) (888 . 889)) nil (25411 30768 779124 591000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 887) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . 1) (undo-tree-id1053 . -1)) nil (25411 30768 779113 982000) 0 nil])
([nil nil (("
" . -7637) ("      
" . -7050) (undo-tree-id1061 . -6) (undo-tree-id1062 . -6) (5828 . 5984) (#("	  |> Map.update!(\"payment_date\", fn _x -> ~U[1970-01-01 00:00:00Z] end)
          
	  |> Map.update!(\"quota_sec\", fn x -> x |> String.to_integer() end)
	  
" 6 9 (face font-lock-type-face) 18 19 (syntax-table (15) face font-lock-string-face) 19 31 (face font-lock-string-face) 31 32 (syntax-table (15) face font-lock-string-face) 34 36 (face font-lock-keyword-face) 37 39 (face font-lock-comment-face) 43 45 (face font-lock-builtin-face) 46 66 (face font-lock-string-face) 68 71 (face font-lock-keyword-face) 90 93 (face font-lock-type-face) 102 103 (syntax-table (15) face font-lock-string-face) 103 105 (face font-lock-string-face) 105 112 (face font-lock-string-face) 112 113 (syntax-table (15) face font-lock-string-face) 115 117 (face font-lock-keyword-face) 128 134 (face font-lock-type-face) 148 151 (face font-lock-keyword-face) 151 152 (rear-nonsticky t)) . -5828) (undo-tree-id1063 . -83) (4406 . 4407) (2973 . 3102) (#("    process_quota_map(quota_plan_list, loan_code_field) ++ process_concept_quota_map(quota_concept_list, loan_code_field)
" 54 55 (rear-nonsticky t) 120 121 (rear-nonsticky t)) . -2973) (undo-tree-id1064 . -4) (undo-tree-id1065 . -59) (2068 . 2140) (#("        # |> Phoenix.View.render_many(\"index_quota.json\", Quota: quota)
" 8 10 (face font-lock-comment-delimiter-face) 10 13 (face font-lock-comment-face) 13 20 (face font-lock-comment-face) 20 25 (face font-lock-comment-face) 25 37 (face font-lock-comment-face) 37 38 (face font-lock-comment-face) 38 39 (face font-lock-comment-face syntax-table (15)) 39 55 (face font-lock-comment-face) 55 56 (face font-lock-comment-face syntax-table (15)) 56 58 (face font-lock-comment-face) 58 59 (face font-lock-comment-face) 59 64 (face font-lock-comment-face) 64 70 (face font-lock-comment-face) 70 71 (rear-nonsticky t face font-lock-comment-face) 71 72 (face font-lock-comment-face)) . -2067) (1102 . 1640) (#("

#	       quota_map
#               |> Map.values()
#               |> hd#
#	       |> Creditos.create_clients_quota(
               
	      # |> Enum.into(%{})
	      # |> IO.inspect()
#             ) 
#      conn
#        |> put_status(:created)
#        |> put_resp_header(\"location\", Routes.quota_path(conn, :show, clients_quota))
#               |> put_view(CabbotWeb.ClientsQuotaView)
#               |> render(\"show.json\", clients_quota: clients_quota)
	       
	   end
	     
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t face font-lock-comment-delimiter-face) 3 20 (fontified t face font-lock-comment-face) 20 21 (fontified t face font-lock-comment-face) 21 22 (fontified t face font-lock-comment-delimiter-face) 22 37 (fontified t face font-lock-comment-delimiter-face) 37 40 (fontified t face font-lock-comment-face) 40 41 (fontified t face font-lock-comment-face) 41 42 (fontified t face font-lock-comment-face) 42 43 (fontified t face font-lock-comment-face) 43 47 (fontified t face font-lock-comment-face) 47 52 (fontified t face font-lock-comment-face) 52 53 (fontified t face font-lock-comment-face) 53 54 (fontified t face font-lock-comment-delimiter-face) 54 56 (fontified t face font-lock-comment-delimiter-face) 56 59 (fontified t face font-lock-comment-delimiter-face) 59 60 (fontified t face font-lock-comment-delimiter-face) 60 69 (fontified t face font-lock-comment-delimiter-face) 69 73 (fontified t face font-lock-comment-face) 73 74 (rear-nonsticky t fontified t face font-lock-comment-face) 74 75 (fontified t face font-lock-comment-face) 75 76 (fontified t face font-lock-comment-face) 76 77 (fontified t face font-lock-comment-delimiter-face) 77 84 (fontified t face font-lock-comment-face) 84 88 (fontified t face font-lock-comment-face) 88 96 (fontified t face font-lock-comment-face) 96 105 (fontified t face font-lock-comment-face) 105 110 (fontified t face font-lock-comment-face) 110 118 (fontified t face font-lock-comment-face) 118 119 (fontified t face font-lock-comment-face) 119 134 (fontified t) 134 135 (fontified t) 135 142 (fontified t) 142 144 (fontified t face font-lock-comment-delimiter-face) 144 147 (fontified t face font-lock-comment-face) 147 151 (fontified t face font-lock-comment-face) 151 156 (fontified t face font-lock-comment-face) 156 158 (fontified t face font-lock-comment-face) 158 160 (fontified t face font-lock-comment-face) 160 161 (fontified t face font-lock-comment-face) 161 162 (fontified t face font-lock-comment-face) 162 169 (fontified t) 169 171 (fontified t face font-lock-comment-delimiter-face) 171 174 (fontified t face font-lock-comment-face) 174 176 (fontified t face font-lock-comment-face) 176 184 (fontified t face font-lock-comment-face) 184 185 (fontified t face font-lock-comment-face) 185 186 (fontified t face font-lock-comment-face) 186 187 (fontified t face font-lock-comment-face) 187 188 (fontified t face font-lock-comment-delimiter-face) 188 190 (fontified t face font-lock-comment-delimiter-face) 190 198 (fontified t face font-lock-comment-delimiter-face) 198 201 (fontified t face font-lock-comment-delimiter-face) 201 202 (fontified t face font-lock-comment-face) 202 203 (fontified t face font-lock-comment-face) 203 204 (rear-nonsticky t fontified t face font-lock-comment-face) 204 211 (fontified t face font-lock-comment-delimiter-face) 211 212 (fontified t face font-lock-comment-face) 212 215 (fontified t face font-lock-comment-face) 215 216 (fontified t face font-lock-comment-face) 216 217 (fontified t face font-lock-comment-delimiter-face) 217 223 (fontified t face font-lock-comment-delimiter-face) 223 225 (fontified t face font-lock-comment-delimiter-face) 225 227 (fontified t face font-lock-comment-face) 227 239 (fontified t face font-lock-comment-face) 239 247 (fontified t face font-lock-comment-face) 247 249 (fontified t face font-lock-comment-face) 249 250 (fontified t face font-lock-comment-delimiter-face) 250 258 (fontified t face font-lock-comment-delimiter-face) 258 262 (fontified t face font-lock-comment-face) 262 273 (fontified t face font-lock-comment-face) 273 277 (fontified t face font-lock-comment-face) 277 278 (syntax-table (15) fontified t face font-lock-comment-face) 278 286 (fontified t face font-lock-comment-face) 286 287 (syntax-table (15) fontified t face font-lock-comment-face) 287 289 (fontified t face font-lock-comment-face) 289 292 (fontified t face font-lock-comment-face) 292 295 (fontified t face font-lock-comment-face) 295 296 (fontified t face font-lock-comment-face) 296 298 (fontified t face font-lock-comment-face) 298 299 (fontified t face font-lock-comment-face) 299 303 (fontified t face font-lock-comment-face) 303 304 (fontified t face font-lock-comment-face) 304 306 (fontified t face font-lock-comment-face) 306 309 (fontified t face font-lock-comment-face) 309 311 (fontified t face font-lock-comment-face) 311 313 (fontified t face font-lock-comment-face) 313 317 (fontified t face font-lock-comment-face) 317 318 (fontified t face font-lock-comment-face) 318 321 (fontified t face font-lock-comment-face) 321 322 (fontified t face font-lock-comment-face) 322 336 (fontified t face font-lock-comment-face) 336 337 (fontified t face font-lock-comment-delimiter-face) 337 345 (fontified t face font-lock-comment-delimiter-face) 345 347 (fontified t face font-lock-comment-delimiter-face) 347 352 (fontified t face font-lock-comment-delimiter-face) 352 355 (fontified t face font-lock-comment-face) 355 356 (fontified t face font-lock-comment-face) 356 363 (fontified t face font-lock-comment-face) 363 364 (fontified t face font-lock-comment-face) 364 368 (fontified t face font-lock-comment-face) 368 371 (fontified t face font-lock-comment-face) 371 375 (fontified t face font-lock-comment-face) 375 390 (fontified t face font-lock-comment-face) 390 392 (fontified t face font-lock-comment-face) 392 393 (fontified t face font-lock-comment-delimiter-face) 393 401 (fontified t face font-lock-comment-delimiter-face) 401 408 (fontified t face font-lock-comment-delimiter-face) 408 417 (fontified t face font-lock-comment-face) 417 418 (face font-lock-comment-face fontified t) 418 419 (syntax-table (15) face font-lock-comment-face fontified t) 419 423 (face font-lock-comment-face fontified t) 423 426 (face font-lock-comment-face fontified t) 426 428 (face font-lock-comment-face fontified t) 428 429 (syntax-table (15) face font-lock-comment-face fontified t) 429 431 (face font-lock-comment-face fontified t) 431 442 (face font-lock-comment-face fontified t) 442 445 (face font-lock-comment-face fontified t) 445 448 (face font-lock-comment-face fontified t) 448 455 (face font-lock-comment-face fontified t) 455 460 (face font-lock-comment-face fontified t) 460 461 (face font-lock-comment-face fontified t) 474 477 (face font-lock-keyword-face)) . -1102) (undo-tree-id1066 . -392) (undo-tree-id1067 . -104) (undo-tree-id1068 . -134) (undo-tree-id1069 . -1) (undo-tree-id1070 . -53) (undo-tree-id1071 . -53) (undo-tree-id1072 . -2) (undo-tree-id1073 . -2) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -21) (undo-tree-id1078 . -21) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (1016 . 1044) (862 . 1015) (#("      new_data2 = quota_map
      |> Enum.map(fn x ->
	x[:Quota] |> Map.new(fn {k,v} -> {k |> String.to_atom(),v}  end) end)

	IO.inspect(new_data2)
" 0 2 (fontified t) 2 6 (fontified t) 6 15 (fontified t face font-lock-variable-name-face) 15 27 (fontified t) 27 28 (fontified t) 28 37 (fontified t) 37 41 (fontified t face font-lock-type-face) 41 46 (fontified t) 46 48 (fontified t face font-lock-keyword-face) 48 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t) 55 57 (fontified t) 57 63 (fontified t face elixir-atom-face) 63 68 (fontified t) 68 71 (fontified t face font-lock-type-face) 71 76 (fontified t) 76 78 (fontified t face font-lock-keyword-face) 78 94 (fontified t) 94 100 (fontified t face font-lock-type-face) 100 115 (fontified t) 115 118 (fontified t face font-lock-keyword-face) 118 120 (fontified t) 120 122 (fontified t face font-lock-keyword-face) 122 123 (rear-nonsticky t fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 125 (fontified t) 125 126 (fontified t) 126 127 (fontified t) 127 129 (fontified t face font-lock-type-face) 129 137 (fontified t) 137 147 (fontified t) 147 148 (fontified t) 148 149 (rear-nonsticky t fontified t)) . -862) (undo-tree-id1081 . -2) (undo-tree-id1082 . -149) (undo-tree-id1083 . -149) (undo-tree-id1084 . -54) (undo-tree-id1085 . -125) (undo-tree-id1086 . -126) (undo-tree-id1087 . -126) (undo-tree-id1088 . -125) (undo-tree-id1089 . -125) (undo-tree-id1090 . -54) (undo-tree-id1091 . -54) (undo-tree-id1092 . -28) (undo-tree-id1093 . -28) (undo-tree-id1094 . -53) (undo-tree-id1095 . 95) (undo-tree-id1096 . -54) (undo-tree-id1097 . -54) (undo-tree-id1098 . -65) (undo-tree-id1099 . -65) (undo-tree-id1100 . -65) (undo-tree-id1101 . -65) (undo-tree-id1102 . -65) (565 . 836) (#("#      with [:ClientsQuota] <- quota_map |> Map.keys(),
#           {:ok, %ClientsQuota{} = clients_quota} <-
#             Creditos.create_clients_quota(
#               quota_map
#               |> Map.values()
#               |> hd
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 7 (fontified t face font-lock-comment-delimiter-face) 7 11 (fontified t face font-lock-comment-face) 11 13 (fontified t face font-lock-comment-face) 13 26 (fontified t face font-lock-comment-face) 26 44 (fontified t face font-lock-comment-face) 44 47 (fontified t face font-lock-comment-face) 47 56 (fontified t face font-lock-comment-face) 56 57 (fontified t face font-lock-comment-delimiter-face) 57 58 (fontified t face font-lock-comment-delimiter-face) 58 68 (fontified t face font-lock-comment-delimiter-face) 68 69 (fontified t face font-lock-comment-face) 69 72 (fontified t face font-lock-comment-face) 72 74 (fontified t face font-lock-comment-face) 74 87 (fontified t face font-lock-comment-face) 87 110 (fontified t face font-lock-comment-face) 110 111 (fontified t face font-lock-comment-delimiter-face) 111 113 (fontified t face font-lock-comment-delimiter-face) 113 124 (fontified t face font-lock-comment-delimiter-face) 124 132 (fontified t face font-lock-comment-face) 132 141 (fontified t face font-lock-comment-face) 141 146 (fontified t face font-lock-comment-face) 146 155 (fontified t face font-lock-comment-face) 155 156 (fontified t face font-lock-comment-delimiter-face) 156 171 (fontified t face font-lock-comment-delimiter-face) 171 181 (fontified t face font-lock-comment-face) 181 182 (fontified t face font-lock-comment-delimiter-face) 182 190 (fontified t face font-lock-comment-delimiter-face) 190 196 (fontified t face font-lock-comment-delimiter-face) 196 197 (fontified t face font-lock-comment-delimiter-face) 197 200 (fontified t face font-lock-comment-face) 200 201 (fontified t face font-lock-comment-face) 201 202 (fontified t face font-lock-comment-face) 202 203 (fontified t face font-lock-comment-face) 203 207 (fontified t face font-lock-comment-face) 207 212 (fontified t face font-lock-comment-face) 212 213 (fontified t face font-lock-comment-face) 213 214 (fontified t face font-lock-comment-delimiter-face) 214 216 (fontified t face font-lock-comment-delimiter-face) 216 219 (fontified t face font-lock-comment-delimiter-face) 219 220 (fontified t face font-lock-comment-delimiter-face) 220 229 (fontified t face font-lock-comment-delimiter-face) 229 235 (fontified t face font-lock-comment-face)) . -565) (undo-tree-id1103 . -56) (undo-tree-id1104 . -7) (undo-tree-id1105 . -110) (undo-tree-id1106 . -65) (undo-tree-id1107 . -181) (undo-tree-id1108 . -181) (undo-tree-id1109 . -56) (undo-tree-id1110 . -56) (undo-tree-id1111 . -155) (undo-tree-id1112 . -155) (undo-tree-id1113 . -213) (undo-tree-id1114 . -213) (undo-tree-id1115 . -110) (undo-tree-id1116 . -110) (undo-tree-id1117 . -235) (undo-tree-id1118 . -235) (508 . 533) (#("#    |> IO.inspect()
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 5 (fontified t face font-lock-comment-delimiter-face) 5 8 (fontified t face font-lock-comment-face) 8 10 (fontified t face font-lock-comment-face) 10 18 (fontified t face font-lock-comment-face) 18 19 (fontified t face font-lock-comment-face) 19 20 (fontified t face font-lock-comment-face) 20 21 (fontified t face font-lock-comment-face)) . -508) (undo-tree-id1119 . -21) (undo-tree-id1120 . -21) (#("  
" 0 2 (fontified t) 2 3 (fontified t)) . -402) (undo-tree-id1121 . -3) (undo-tree-id1122 . -3) (#("  
" 0 3 (fontified t)) . -183) (69 . 70) (#("  
  
" 0 2 (fontified t) 2 3 (fontified t) 3 6 (fontified t)) . -69) (t 25411 30768 839737 129000)) nil (25411 30843 160033 674000) 0 nil])
([nil nil ((1013 . 1014) (#("  " 0 2 (fontified nil)) . -1008) (1014 . 1015)) nil (25411 30843 159916 163000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -1028) (1028 . 1029) (#(")" 0 1 (fontified nil)) . -1028) (1028 . 1029) (1014 . 1029)) nil (25411 30843 159914 751000) 0 nil])
([nil nil ((#("new_data2 =" 0 9 (fontified t face font-lock-variable-name-face) 9 11 (fontified t)) . 868) (undo-tree-id1060 . -11)) nil (25411 30843 159912 847000) 0 nil])
([nil nil ((#("      IO.inspect(new_data2)" 0 6 (fontified t) 6 8 (fontified t face font-lock-type-face) 8 27 (fontified t)) . 1020) (undo-tree-id1059 . -27)) nil (25411 30843 159908 129000) 0 nil])
([nil nil ((928 . 935) (t 25411 30843 165888 521000)) nil (25411 30867 971239 387000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -512) (undo-tree-id1123 . -1) 513 (t 25411 30868 32201 880000)) nil (25411 30913 777826 530000) 0 nil])
([nil nil ((#("process_quota_map(quota_plan_list, loan_code_field)" 0 51 (fontified t)) . 2961) (undo-tree-id1129 . -51) (undo-tree-id1130 . -51) (undo-tree-id1131 . 1) (undo-tree-id1132 . -51) (undo-tree-id1133 . 34) (undo-tree-id1134 . -18) 3012 (t 25411 30913 797338 178000)) nil (25411 30959 146645 664000) 0 nil])
([nil nil ((3033 . 3037)) nil (25411 30959 146635 616000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3087 . 3088) (nil fontified nil 3037 . 3088) (3037 . 3088)) nil (25411 30959 146634 664000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -2962) (undo-tree-id1127 . -1) (#("+" 0 1 (fontified t)) . -2963) (undo-tree-id1128 . -1) 2964) nil (25411 30959 146632 921000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2962) (#(" " 0 1 (fontified t)) . 2962) (#(" " 0 1 (fontified t)) . 2962) (#(" " 0 1 (fontified t)) . 2962) (#("
" 0 1 (fontified t)) . 2962) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1)) nil (25411 30959 146627 210000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2961) (#(" " 0 1 (fontified t)) . 2961) (#(" " 0 1 (fontified t)) . 2961)) nil (25411 30959 146608 226000) 0 nil])
([nil nil ((944 . 947) (#("	" 0 1 (fontified nil)) . 943) (undo-tree-id1135 . -1) (#("  " 0 2 (fontified nil)) . -944) (undo-tree-id1136 . -2) (943 . 947) (#("	" 0 1 (fontified nil)) . 942) (undo-tree-id1137 . -1) (#("  " 0 2 (fontified nil)) . -943) (undo-tree-id1138 . -2) (942 . 946) (#(" " 0 1 (fontified nil)) . 941) (undo-tree-id1139 . -1) (#("  " 0 2 (fontified nil)) . -922) (944 . 945) (t 25411 30959 186726 184000)) nil (25411 31035 133793 335000) 0 nil])
([nil nil ((946 . 947)) nil (25411 31035 133709 42000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -944) (944 . 945) (#("]" 0 1 (fontified nil)) . -944) (944 . 945) (941 . 945)) nil (25411 31035 133706 377000) 0 nil])
([nil nil ((944 . 957)) nil (25411 31035 133702 671000) 0 nil])
([nil nil ((958 . 962)) nil (25411 31035 133700 537000) 0 nil])
([nil nil ((962 . 963) (#(")" 0 1 (fontified nil face font-lock-keyword-face)) . -962) (962 . 963)) nil (25411 31035 133696 910000) 0 nil])
([nil nil ((973 . 975) (#(")" 0 1 (fontified nil)) . -973) (959 . 974)) nil (25411 31035 133687 293000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -1051) (undo-tree-id1140 . -1) (#(">" 0 1 (fontified t)) . -1052) (undo-tree-id1141 . -1) (#(" " 0 1 (fontified t)) . -1053) (undo-tree-id1142 . -1) (#("I" 0 1 (fontified t face font-lock-type-face)) . -1054) (undo-tree-id1143 . -1) (#("O" 0 1 (fontified t face font-lock-type-face)) . -1055) (undo-tree-id1144 . -1) (#("." 0 1 (fontified t)) . -1056) (undo-tree-id1145 . -1) (#("i" 0 1 (fontified t)) . -1057) (undo-tree-id1146 . -1) (#("n" 0 1 (fontified t)) . -1058) (undo-tree-id1147 . -1) (#("s" 0 1 (fontified t)) . -1059) (undo-tree-id1148 . -1) (#("p" 0 1 (fontified t)) . -1060) (undo-tree-id1149 . -1) (#("e" 0 1 (fontified t)) . -1061) (undo-tree-id1150 . -1) (#("c" 0 1 (fontified t)) . -1062) (undo-tree-id1151 . -1) (#("t" 0 1 (fontified t)) . -1063) (undo-tree-id1152 . -1) (#("(" 0 1 (fontified t)) . -1064) (undo-tree-id1153 . -1) (#(")" 0 1 (fontified t)) . -1065) (undo-tree-id1154 . -1) (undo-tree-id1155 . 1) (undo-tree-id1156 . -1) 1066 (t 25411 31035 190683 867000)) nil (25411 31043 952002 81000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -959) (undo-tree-id1195 . -1) (#(">" 0 1 (fontified t)) . -960) (undo-tree-id1196 . -1) (#(" " 0 1 (fontified t)) . -961) (undo-tree-id1197 . -1) (#("I" 0 1 (fontified t face font-lock-type-face)) . -962) (undo-tree-id1198 . -1) (#("O" 0 1 (fontified t face font-lock-type-face)) . -963) (undo-tree-id1199 . -1) (#("." 0 1 (fontified t)) . -964) (undo-tree-id1200 . -1) (#("i" 0 1 (fontified t)) . -965) (undo-tree-id1201 . -1) (#("n" 0 1 (fontified t)) . -966) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (#("s" 0 1 (fontified t)) . -967) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (#("p" 0 1 (fontified t)) . -968) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (#("e" 0 1 (fontified t)) . -969) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (#("c" 0 1 (fontified t)) . -970) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (#("t" 0 1 (fontified t)) . -971) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (#("(" 0 1 (fontified t)) . -972) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . 1) (undo-tree-id1223 . -1) (#(")" 0 1 (fontified t)) . -973) (undo-tree-id1224 . -1) (undo-tree-id1225 . 1) (undo-tree-id1226 . -1) (#(" " 0 1 (fontified t)) . -974) (undo-tree-id1227 . -1) 975 (t 25411 31043 982235 193000)) nil (25411 31081 671404 191000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -939) (undo-tree-id1157 . -1) (#(">" 0 1 (fontified t)) . -940) (undo-tree-id1158 . -1) (#(" " 0 1 (fontified t)) . -941) (undo-tree-id1159 . -1) (#("x" 0 1 (fontified t)) . -942) (undo-tree-id1160 . -1) (#("[" 0 1 (fontified t)) . -943) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . 1) (undo-tree-id1164 . -1) (#(":" 0 1 (fontified t face elixir-atom-face)) . -944) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (#("C" 0 1 (fontified t face elixir-atom-face)) . -945) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (#("l" 0 1 (fontified t face elixir-atom-face)) . -946) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (#("i" 0 1 (fontified t face elixir-atom-face)) . -947) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (#("e" 0 1 (fontified t face elixir-atom-face)) . -948) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (#("n" 0 1 (fontified t face elixir-atom-face)) . -949) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (#("t" 0 1 (fontified t face elixir-atom-face)) . -950) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (#("s" 0 1 (fontified t face elixir-atom-face)) . -951) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (#("Q" 0 1 (fontified t face elixir-atom-face)) . -952) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (#("u" 0 1 (fontified t face elixir-atom-face)) . -953) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (#("o" 0 1 (fontified t face elixir-atom-face)) . -954) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (#("t" 0 1 (fontified t face elixir-atom-face)) . -955) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (#("a" 0 1 (fontified t face elixir-atom-face)) . -956) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (#("]" 0 1 (fontified t)) . -957) (undo-tree-id1191 . -1) (undo-tree-id1192 . 1) (undo-tree-id1193 . -1) (#(" " 0 1 (fontified t)) . -958) (undo-tree-id1194 . -1) 959) nil (25411 31081 671333 473000) 0 nil])
([nil nil ((943 . 945)) nil (25411 31081 671250 442000) 0 nil])
([nil nil ((959 . 960) (#(")" 0 1 (fontified nil)) . -959) (945 . 960)) nil (25411 31081 671242 36000) 0 nil])
([nil nil ((1025 . 1026) (t 25411 31081 732340 730000)) nil (25411 31093 27178 879000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . -902) (undo-tree-id1228 . -1) (#("a" 0 1 (fontified t)) . -903) (undo-tree-id1229 . -1) (#("p" 0 1 (fontified t)) . -904) (undo-tree-id1230 . -1) 905 (t 25411 31093 87779 615000)) nil (25411 31527 294228 517000) 0 nil])
([nil nil ((902 . 908)) nil (25411 31527 294158 24000) 0 nil])
([nil nil ((#("      
        quota_map
        |> Enum.filter(fn x ->
        x[:ClientsQuota] end)
	|> IO.inspect()
" 0 6 (fontified t) 6 7 (fontified t) 7 25 (fontified t) 25 29 (fontified t) 29 36 (fontified t) 36 40 (fontified t face font-lock-type-face) 40 48 (fontified t) 48 50 (fontified t face font-lock-keyword-face) 50 56 (fontified t) 56 66 (fontified t) 66 79 (fontified t face elixir-atom-face) 79 81 (fontified t) 81 84 (fontified t face font-lock-keyword-face) 84 85 (fontified t) 85 86 (fontified t) 86 90 (fontified t) 90 92 (fontified t face font-lock-type-face) 92 100 (fontified t) 100 101 (fontified t) 101 102 (fontified t) 102 103 (fontified t)) . -861) (undo-tree-id1288 . -103) (undo-tree-id1289 . -103) (undo-tree-id1290 . -56) (undo-tree-id1291 . -56) (undo-tree-id1292 . -7) (undo-tree-id1293 . -7) (undo-tree-id1294 . -25) (undo-tree-id1295 . -25) (undo-tree-id1296 . -103) (undo-tree-id1297 . -103) (undo-tree-id1298 . -86) (undo-tree-id1299 . -86) (undo-tree-id1300 . -103) 964 (t 25411 31527 330495 399000)) nil (25411 31926 992787 327000) 0 nil])
([nil nil ((#("
	 # Map.new(fn {k, v} -> {k |> String.to_atom(), v} end)
     # end)
	
" 0 1 (fontified t) 1 3 (fontified t) 3 5 (fontified t face font-lock-comment-delimiter-face) 5 8 (fontified t face font-lock-comment-face) 8 13 (fontified t face font-lock-comment-face) 13 15 (fontified t face font-lock-comment-face) 15 32 (fontified t face font-lock-comment-face) 32 38 (fontified t face font-lock-comment-face) 38 53 (fontified t face font-lock-comment-face) 53 56 (fontified t face font-lock-comment-face) 56 57 (fontified t face font-lock-comment-face) 57 58 (fontified t face font-lock-comment-face) 58 63 (fontified t) 63 65 (fontified t face font-lock-comment-delimiter-face) 65 68 (fontified t face font-lock-comment-face) 68 69 (fontified t face font-lock-comment-face) 69 70 (fontified t face font-lock-comment-face) 70 71 (fontified t) 71 72 (fontified t)) . -862) (undo-tree-id1281 . -70) (undo-tree-id1282 . -70) (undo-tree-id1283 . -72) (undo-tree-id1284 . -72) (undo-tree-id1285 . -72) (undo-tree-id1286 . -72) (undo-tree-id1287 . -72) 934) nil (25411 31926 992764 354000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 861) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1)) nil (25411 31926 992751 360000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 861) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1)) nil (25411 31926 992740 540000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 861) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1)) nil (25411 31926 992732 275000) 0 nil])
([nil nil ((#("
      with [:ClientsQuota] <- quota_map |> Map.keys() do
        # 	       quota_map
        #               |> Map.values()
        #               |> hd#
        # 	       |> Creditos.create_clients_quota(

        # |> Enum.into(%{})
        # |> IO.inspect()
        #             ) 
" 0 1 (fontified t) 1 5 (fontified t) 5 7 (fontified t) 7 11 (fontified t face font-lock-keyword-face) 11 13 (fontified t) 13 26 (fontified t face elixir-atom-face) 26 44 (fontified t) 44 47 (fontified t face font-lock-type-face) 47 55 (fontified t) 55 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 66 (fontified t) 66 68 (fontified t face font-lock-comment-delimiter-face) 68 86 (fontified t face font-lock-comment-face) 86 94 (fontified t) 94 110 (fontified t face font-lock-comment-delimiter-face) 110 126 (fontified t face font-lock-comment-face) 126 134 (fontified t) 134 150 (fontified t face font-lock-comment-delimiter-face) 150 157 (fontified t face font-lock-comment-face) 157 165 (fontified t) 165 167 (fontified t face font-lock-comment-delimiter-face) 167 209 (fontified t face font-lock-comment-face) 209 218 (fontified t) 218 220 (fontified t face font-lock-comment-delimiter-face) 220 238 (fontified t face font-lock-comment-face) 238 246 (fontified t) 246 248 (fontified t face font-lock-comment-delimiter-face) 248 264 (fontified t face font-lock-comment-face) 264 272 (fontified t) 272 286 (fontified t face font-lock-comment-delimiter-face) 286 289 (fontified t face font-lock-comment-face)) . -861) (undo-tree-id1238 . -58) (undo-tree-id1239 . -58) (undo-tree-id1240 . -58) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -126) (undo-tree-id1244 . -126) (undo-tree-id1245 . -157) (undo-tree-id1246 . -157) (undo-tree-id1247 . -58) (undo-tree-id1248 . -58) (undo-tree-id1249 . -289) (undo-tree-id1250 . -289) (undo-tree-id1251 . -289) (undo-tree-id1252 . -209) (undo-tree-id1253 . -209) (undo-tree-id1254 . -58) (undo-tree-id1255 . -58) (undo-tree-id1256 . -210) (undo-tree-id1257 . -210) (undo-tree-id1258 . -238) (undo-tree-id1259 . -238) (undo-tree-id1260 . -58) (undo-tree-id1261 . -264) (undo-tree-id1262 . -264) (undo-tree-id1263 . -289) (undo-tree-id1264 . -86) (undo-tree-id1265 . -86) (undo-tree-id1266 . -289) (undo-tree-id1267 . -289) 1150) nil (25411 31926 992720 453000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -570) (undo-tree-id1237 . -1) 571) nil (25411 31926 992671 953000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -631) (undo-tree-id1236 . -1) 632) nil (25411 31926 992667 655000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -690) (undo-tree-id1235 . -1) 691) nil (25411 31926 992663 427000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -740) (undo-tree-id1234 . -1) 741) nil (25411 31926 992656 264000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -771) (undo-tree-id1233 . -1) 772) nil (25411 31926 992651 826000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -808) (undo-tree-id1232 . -1) 809) nil (25411 31926 992646 5000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -835) (undo-tree-id1231 . -1) 836) nil (25411 31926 992635 525000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -512) (undo-tree-id1304 . -1) (#(" " 0 1 (fontified t)) . -513) (undo-tree-id1305 . -1) (#(" " 0 1 (fontified t)) . -514) (undo-tree-id1306 . -1) (#(" " 0 1 (fontified t)) . -515) (undo-tree-id1307 . -1) (#("|" 0 1 (fontified t)) . -516) (undo-tree-id1308 . -1) (#(">" 0 1 (fontified t)) . -517) (undo-tree-id1309 . -1) (#(" " 0 1 (fontified t)) . -518) (undo-tree-id1310 . -1) (#("I" 0 1 (fontified t face font-lock-type-face)) . -519) (undo-tree-id1311 . -1) (#("O" 0 1 (fontified t face font-lock-type-face)) . -520) (undo-tree-id1312 . -1) (#("." 0 1 (fontified t)) . -521) (undo-tree-id1313 . -1) (#("i" 0 1 (fontified t)) . -522) (undo-tree-id1314 . -1) (#("n" 0 1 (fontified t)) . -523) (undo-tree-id1315 . -1) (#("s" 0 1 (fontified t)) . -524) (undo-tree-id1316 . -1) (#("p" 0 1 (fontified t)) . -525) (undo-tree-id1317 . -1) (#("e" 0 1 (fontified t)) . -526) (undo-tree-id1318 . -1) (#("c" 0 1 (fontified t)) . -527) (undo-tree-id1319 . -1) (#("t" 0 1 (fontified t)) . -528) (undo-tree-id1320 . -1) (#("(" 0 1 (fontified t)) . -529) (undo-tree-id1321 . -1) (#(")" 0 1 (fontified t)) . -530) (undo-tree-id1322 . -1) (undo-tree-id1323 . 1) (undo-tree-id1324 . -1) 531 (t 25411 31927 13722 287000)) nil (25411 31945 80737 458000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 512) (#(" " 0 1 (fontified t)) . 512) (#(" " 0 1 (fontified t)) . 512) (#(" " 0 1 (fontified t)) . 512) (#("
" 0 1 (fontified t)) . 512) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1)) nil (25411 31945 80685 622000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 838) (t 25411 31945 113464 432000)) nil (25411 35157 990579 810000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 857)) nil (25411 35157 990576 804000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 897)) nil (25411 35157 990574 79000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 991)) nil (25411 35157 990570 722000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 1054)) nil (25411 35157 990562 496000) 0 nil])
([nil nil ((830 . 831) (t 25411 35158 23491 749000)) nil (25411 35529 161284 676000) 0 nil])
([nil nil ((850 . 851)) nil (25411 35529 161283 925000) 0 nil])
([nil nil ((891 . 892)) nil (25411 35529 161283 284000) 0 nil])
([nil nil ((987 . 988)) nil (25411 35529 161282 702000) 0 nil])
([nil nil ((1051 . 1052)) nil (25411 35529 161282 131000) 0 nil])
([nil nil ((830 . 835) (#("		   " 0 5 (fontified t)) . 829) (undo-tree-id1327 . -5) (828 . 835)) nil (25411 35529 161281 79000) 0 nil])
([nil nil ((835 . 840)) nil (25411 35529 161279 436000) 0 nil])
([nil nil ((835 . 843)) nil (25411 35529 161278 755000) 0 nil])
([nil nil ((835 . 847)) nil (25411 35529 161277 883000) 0 nil])
([nil nil ((#("clients_quota" 0 13 (fontified t)) . 847) (undo-tree-id1325 . -13) (undo-tree-id1326 . -13) 860) nil (25411 35529 161276 180000) 0 nil])
([nil nil ((nil rear-nonsticky nil 858 . 859) (nil fontified nil 846 . 859) (846 . 859)) nil (25411 35529 161262 774000) 0 nil])
([nil nil ((859 . 867) (t 25411 35529 178982 744000)) nil (25411 35574 31612 677000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . -866) (undo-tree-id1328 . -1) 867) nil (25411 35574 31609 401000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -874) (874 . 875) (#(")" 0 1 (fontified nil)) . -874) (874 . 875) (866 . 875)) nil (25411 35574 31590 215000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -874) (undo-tree-id1360 . -1) (undo-tree-id1361 . 1) (undo-tree-id1362 . -1) 875 (t 25411 35574 68526 887000)) nil (25411 35642 266436 845000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . -873) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (#(")" 0 1 (fontified t)) . 874) (undo-tree-id1359 . -1)) nil (25411 35642 266426 505000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -859) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (#("|" 0 1 (fontified t)) . -860) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (#(">" 0 1 (fontified t)) . -861) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (#(" " 0 1 (fontified t)) . -862) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (#("M" 0 1 (fontified t face font-lock-type-face)) . -863) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -864) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (#("p" 0 1 (fontified t face font-lock-type-face)) . -865) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (#("." 0 1 (fontified t)) . -866) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (#("v" 0 1 (fontified t)) . -867) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (#("a" 0 1 (fontified t)) . -868) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (#("l" 0 1 (fontified t)) . -869) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (#("u" 0 1 (fontified t)) . -870) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (#("e" 0 1 (fontified t)) . -871) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (#("s" 0 1 (fontified t)) . -872) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) 873) nil (25411 35642 266411 416000) 0 nil])
([nil nil ((859 . 860) (#(")" 0 1 (fontified nil)) . -859) (859 . 860)) nil (25411 35642 266304 533000) 0 nil])
([nil nil ((403 . 405) (#("  " 0 2 (fontified t)) . 402) (undo-tree-id1408 . -2) (402 . 405) (#("  " 0 2 (fontified nil)) . 401) (401 . 403) (401 . 402) (t 25411 35642 302776 349000)) nil (25411 36547 486768 495000) 0 nil])
([nil nil ((403 . 405) (#("  " 0 2 (fontified nil)) . 402) (402 . 404) (402 . 403)) nil (25411 36547 486766 211000) 0 nil])
([nil nil ((405 . 422)) nil (25411 36547 486765 199000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-function-name-face)) . -420) (undo-tree-id1406 . -1) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -421) (undo-tree-id1407 . -1) 422) nil (25411 36547 486764 187000) 0 nil])
([nil nil ((420 . 422)) nil (25411 36547 486762 254000) 0 nil])
([nil nil ((422 . 426)) nil (25411 36547 486761 603000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face font-lock-function-name-face)) . -409) (undo-tree-id1389 . -1) (#("u" 0 1 (fontified t face font-lock-function-name-face)) . -410) (undo-tree-id1390 . -1) (#("l" 0 1 (fontified t face font-lock-function-name-face)) . -411) (undo-tree-id1391 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -412) (undo-tree-id1392 . -1) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -413) (undo-tree-id1393 . -1) (#("_" 0 1 (fontified t face font-lock-function-name-face)) . -414) (undo-tree-id1394 . -1) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -415) (undo-tree-id1395 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -416) (undo-tree-id1396 . -1) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -417) (undo-tree-id1397 . -1) (#("d" 0 1 (fontified t face font-lock-function-name-face)) . -418) (undo-tree-id1398 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -419) (undo-tree-id1399 . -1) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -420) (undo-tree-id1400 . -1) (#("_" 0 1 (fontified t face font-lock-function-name-face)) . -421) (undo-tree-id1401 . -1) (#("c" 0 1 (fontified t face font-lock-function-name-face)) . -422) (undo-tree-id1402 . -1) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -423) (undo-tree-id1403 . -1) (#("l" 0 1 (fontified t face font-lock-function-name-face)) . -424) (undo-tree-id1404 . -1) (#("l" 0 1 (fontified t face font-lock-function-name-face)) . -425) (undo-tree-id1405 . -1) 426) nil (25411 36547 486757 725000) 0 nil])
([nil nil ((409 . 428)) nil (25411 36547 486744 661000) 0 nil])
([nil nil ((428 . 430)) nil (25411 36547 486744 20000) 0 nil])
([nil nil ((430 . 435)) nil (25411 36547 486743 379000) 0 nil])
([nil nil ((435 . 438)) nil (25411 36547 486742 818000) 0 nil])
([nil nil ((430 . 435)) nil (25411 36547 486742 177000) 0 nil])
([nil nil ((427 . 428)) nil (25411 36547 486741 556000) 0 nil])
([nil nil ((431 . 436)) nil (25411 36547 486740 904000) 0 nil])
([nil nil ((436 . 438)) nil (25411 36547 486740 353000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -437) (undo-tree-id1388 . -1) 438) nil (25411 36547 486739 301000) 0 nil])
([nil nil ((437 . 442)) nil (25411 36547 486737 979000) 0 nil])
([nil nil ((442 . 447)) nil (25411 36547 486737 328000) 0 nil])
([nil nil ((447 . 454)) nil (25411 36547 486736 727000) 0 nil])
([nil nil ((453 . 456)) nil (25411 36547 486736 75000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -449) (undo-tree-id1378 . -1) (#("e" 0 1 (fontified t)) . -450) (undo-tree-id1379 . -1) (#("w" 0 1 (fontified t)) . -451) (undo-tree-id1380 . -1) (#("(" 0 1 (fontified t)) . -452) (undo-tree-id1381 . -1) (#("f" 0 1 (fontified t)) . -453) (undo-tree-id1382 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -454) (undo-tree-id1383 . -1) (#(" " 0 1 (fontified t)) . -455) (undo-tree-id1384 . -1) (#(")" 0 1 (fontified t)) . -456) (undo-tree-id1385 . -1) (undo-tree-id1386 . 1) (undo-tree-id1387 . -1) 457) nil (25411 36547 486734 362000) 0 nil])
([nil nil ((449 . 456)) nil (25411 36547 486724 594000) 0 nil])
([nil nil ((#("process_concept_quota_map(quota_concept_list, loan_code_field)" 0 56 (fontified t) 56 62 (fontified t)) . 2578) (undo-tree-id1371 . -62) (undo-tree-id1372 . -62) (undo-tree-id1373 . 1) (undo-tree-id1374 . -62) (undo-tree-id1375 . 37) (undo-tree-id1376 . -26) (undo-tree-id1377 . -62) 2640) nil (25411 36547 486723 212000) 0 nil])
([nil nil ((2633 . 2637)) nil (25411 36547 486717 762000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2698 . 2699) (nil fontified nil 2693 . 2699) (nil fontified nil 2637 . 2693) (2637 . 2699)) nil (25411 36547 486716 600000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2578) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (#("+" 0 1 (fontified t)) . -2579) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (#("+" 0 1 (fontified t)) . -2580) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (#(" " 0 1 (fontified t)) . -2581) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) 2582) nil (25411 36547 486711 871000) 0 nil])
([nil nil ((#("		   IO.inspect(clients_quota)" 0 5 (fontified t) 5 7 (fontified t face font-lock-type-face) 7 15 (fontified t) 15 16 (fontified t) 16 28 (fontified t) 28 29 (rear-nonsticky t fontified t) 29 30 (fontified t)) . 901) (undo-tree-id1423 . -29) (undo-tree-id1424 . -16) (t 25411 36547 493538 67000)) nil (25411 36609 940504 744000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 901) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1)) nil (25411 36609 940495 807000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 901) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1)) nil (25411 36609 940486 510000) 0 nil])
([nil nil ((1426 . 1427)) nil (25411 36609 940456 905000) 0 nil])
([nil nil ((1440 . 1441)) nil (25411 36609 940454 861000) 0 nil])
([nil nil ((1473 . 1474)) nil (25411 36609 940452 888000) 0 nil])
([nil nil ((1552 . 1553)) nil (25411 36609 940450 33000) 0 nil])
([nil nil ((1594 . 1595)) nil (25411 36609 940443 210000) 0 nil])
([nil nil ((#("           with [:ClientsQuota] <- quota_map |> Map.keys(),
                 {:ok, %ClientsQuota{} = clients_quota} <-
                   Creditos.create_clients_quota(
                     quota_map
                     |> Map.values()
                     |> hd
                   ) do

#              conn
#                |> put_status(:created)
#                |> put_resp_header(\"location\", Routes.quota_path(conn, :show, clients_quota))
 #                      |> put_view(CabbotWeb.ClientsQuotaView)
 #                      |> render(\"show.json\", clients_quota: clients_quota)
      end
" 0 5 (fontified t) 5 11 (fontified t) 11 15 (fontified t face font-lock-keyword-face) 15 17 (fontified t) 17 30 (fontified t face elixir-atom-face) 30 48 (fontified t) 48 51 (fontified t face font-lock-type-face) 51 60 (fontified t) 60 66 (fontified t) 66 77 (fontified t) 77 78 (fontified t) 78 81 (fontified t face elixir-atom-face) 81 83 (fontified t) 83 96 (fontified t face font-lock-type-face) 96 119 (fontified t) 119 125 (fontified t) 125 138 (fontified t) 138 146 (fontified t face font-lock-type-face) 146 169 (fontified t) 169 175 (fontified t) 175 190 (fontified t) 190 200 (fontified t) 200 206 (fontified t) 206 221 (fontified t) 221 224 (fontified t) 224 227 (fontified t face font-lock-type-face) 227 237 (fontified t) 237 243 (fontified t) 243 258 (fontified t) 258 264 (fontified t) 264 270 (fontified t) 270 272 (fontified t) 272 277 (fontified t) 277 280 (fontified t) 280 283 (fontified t) 283 285 (fontified t) 285 287 (fontified t face font-lock-keyword-face) 287 288 (fontified t) 288 289 (fontified t) 289 290 (fontified t face font-lock-comment-delimiter-face) 290 298 (fontified t face font-lock-comment-delimiter-face) 298 304 (fontified t face font-lock-comment-delimiter-face) 304 309 (fontified t face font-lock-comment-face) 309 310 (fontified t face font-lock-comment-delimiter-face) 310 313 (fontified t face font-lock-comment-delimiter-face) 313 318 (fontified t face font-lock-comment-delimiter-face) 318 321 (fontified t face font-lock-comment-delimiter-face) 321 326 (fontified t face font-lock-comment-delimiter-face) 326 340 (fontified t face font-lock-comment-face) 340 348 (fontified t face font-lock-comment-face) 348 350 (fontified t face font-lock-comment-face) 350 351 (fontified t face font-lock-comment-delimiter-face) 351 359 (fontified t face font-lock-comment-delimiter-face) 359 367 (fontified t face font-lock-comment-delimiter-face) 367 378 (fontified t face font-lock-comment-face) 378 382 (fontified t face font-lock-comment-face) 382 386 (fontified t face font-lock-comment-face) 386 387 (syntax-table (15) fontified t face font-lock-comment-face) 387 395 (fontified t face font-lock-comment-face) 395 396 (syntax-table (15) fontified t face font-lock-comment-face) 396 398 (fontified t face font-lock-comment-face) 398 404 (fontified t face font-lock-comment-face) 404 411 (fontified t face font-lock-comment-face) 411 422 (fontified t face font-lock-comment-face) 422 426 (fontified t face font-lock-comment-face) 426 427 (fontified t face font-lock-comment-face) 427 445 (fontified t face font-lock-comment-face) 445 446 (fontified t) 446 454 (fontified t face font-lock-comment-delimiter-face) 454 469 (fontified t face font-lock-comment-delimiter-face) 469 470 (fontified t face font-lock-comment-face) 470 471 (fontified t face font-lock-comment-face) 471 481 (fontified t face font-lock-comment-face) 481 482 (fontified t face font-lock-comment-face) 482 484 (fontified t face font-lock-comment-face) 484 496 (fontified t face font-lock-comment-face) 496 498 (fontified t face font-lock-comment-face) 498 499 (fontified t face font-lock-comment-face) 499 500 (fontified t face font-lock-comment-face) 500 501 (fontified t face font-lock-comment-face) 501 507 (fontified t face font-lock-comment-face) 507 509 (fontified t face font-lock-comment-face) 509 510 (fontified t) 510 518 (fontified t face font-lock-comment-delimiter-face) 518 533 (fontified t face font-lock-comment-delimiter-face) 533 543 (fontified t face font-lock-comment-face) 543 544 (syntax-table (15) fontified t face font-lock-comment-face) 544 553 (fontified t face font-lock-comment-face) 553 554 (syntax-table (15) fontified t face font-lock-comment-face) 554 556 (fontified t face font-lock-comment-face) 556 558 (fontified t face font-lock-comment-face) 558 570 (fontified t face font-lock-comment-face) 570 586 (fontified t face font-lock-comment-face) 586 592 (fontified t) 592 595 (fontified t face font-lock-keyword-face) 595 596 (fontified t)) . 612) (undo-tree-id1428 . -289) (undo-tree-id1429 . -289) (undo-tree-id1430 . -309) (undo-tree-id1431 . -309) (undo-tree-id1432 . -596) (undo-tree-id1433 . -350) (undo-tree-id1434 . -350) (undo-tree-id1435 . -445) (undo-tree-id1436 . -445) (undo-tree-id1437 . -509) (undo-tree-id1438 . -509) (undo-tree-id1439 . -586) (undo-tree-id1440 . -586) (undo-tree-id1441 . -289) (undo-tree-id1442 . -596) (undo-tree-id1443 . -289) (undo-tree-id1444 . -264) (undo-tree-id1445 . -264) (undo-tree-id1446 . -289) (undo-tree-id1447 . -596) (undo-tree-id1448 . -596) (undo-tree-id1449 . -289) (undo-tree-id1450 . -289) (undo-tree-id1451 . -289) (undo-tree-id1452 . -200) (undo-tree-id1453 . -200) (undo-tree-id1454 . -237) (undo-tree-id1455 . -237) (undo-tree-id1456 . -288) (undo-tree-id1457 . -288) (undo-tree-id1458 . -289) (undo-tree-id1459 . -289) (undo-tree-id1460 . -60) (undo-tree-id1461 . -60) (undo-tree-id1462 . -119) (undo-tree-id1463 . -119) (undo-tree-id1464 . -596) 1208 (t 25411 36609 964268 884000)) nil (25411 36670 230019 413000) 0 nil])
([nil nil ((1128 . 1134) (#("	     " 0 6 (fontified t)) . 1127) (undo-tree-id1425 . -6) (1127 . 1134) (#("	     " 0 6 (fontified t)) . 1126) (undo-tree-id1426 . -6) (1126 . 1133) (#("	     " 0 6 (fontified t)) . 1125) (undo-tree-id1427 . -6) (1125 . 1132) (1117 . 1121) (#("      " 0 6 (fontified nil)) . 1117) (1126 . 1127)) nil (25411 36670 229955 966000) 0 nil])
([nil nil ((1127 . 1133) (#("	     " 0 6 (fontified nil)) . 1126) (1126 . 1132) (1126 . 1127)) nil (25411 36670 229932 192000) 0 nil])
([nil nil ((1126 . 1132) (#("	     " 0 6 (fontified nil)) . 1125) (1125 . 1131) (1125 . 1126)) nil (25411 36670 229926 431000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1727 . 1728) (nil fontified nil 1727 . 1728) (nil fontified nil 1724 . 1727) (nil fontified nil 1718 . 1724) (nil fontified nil 1702 . 1718) (nil fontified nil 1690 . 1702) (nil fontified nil 1688 . 1690) (nil fontified nil 1686 . 1688) (nil fontified nil 1685 . 1686) (nil fontified nil 1676 . 1685) (nil fontified nil 1675 . 1676) (nil fontified nil 1665 . 1675) (nil fontified nil 1650 . 1665) (nil fontified nil 1642 . 1650) (nil fontified nil 1641 . 1642) (nil fontified nil 1639 . 1641) (nil fontified nil 1633 . 1639) (nil fontified nil 1632 . 1633) (nil fontified nil 1631 . 1632) (nil fontified nil 1630 . 1631) (nil fontified nil 1628 . 1630) (nil fontified nil 1616 . 1628) (nil fontified nil 1614 . 1616) (nil fontified nil 1613 . 1614) (nil fontified nil 1603 . 1613) (nil fontified nil 1602 . 1603) (nil fontified nil 1601 . 1602) (nil fontified nil 1586 . 1601) (nil fontified nil 1578 . 1586) (nil fontified nil 1577 . 1578) (nil fontified nil 1559 . 1577) (nil fontified nil 1558 . 1559) (nil fontified nil 1554 . 1558) (nil fontified nil 1543 . 1554) (nil fontified nil 1536 . 1543) (nil fontified nil 1530 . 1536) (nil fontified nil 1528 . 1530) (nil fontified nil 1527 . 1528) (nil fontified nil 1519 . 1527) (nil fontified nil 1518 . 1519) (nil fontified nil 1514 . 1518) (nil fontified nil 1510 . 1514) (nil fontified nil 1499 . 1510) (nil fontified nil 1491 . 1499) (nil fontified nil 1483 . 1491) (nil fontified nil 1482 . 1483) (nil fontified nil 1480 . 1482) (nil fontified nil 1472 . 1480) (nil fontified nil 1458 . 1472) (nil fontified nil 1453 . 1458) (nil fontified nil 1450 . 1453) (nil fontified nil 1445 . 1450) (nil fontified nil 1442 . 1445) (nil fontified nil 1441 . 1442) (nil fontified nil 1436 . 1441) (nil fontified nil 1430 . 1436) (nil fontified nil 1422 . 1430) (nil fontified nil 1421 . 1422) (nil fontified nil 1420 . 1421) (nil fontified nil 1419 . 1420) (nil fontified nil 1417 . 1419) (nil fontified nil 1415 . 1417) (nil fontified nil 1412 . 1415) (nil fontified nil 1409 . 1412) (nil fontified nil 1404 . 1409) (nil fontified nil 1402 . 1404) (nil fontified nil 1396 . 1402) (nil fontified nil 1390 . 1396) (nil fontified nil 1375 . 1390) (nil fontified nil 1369 . 1375) (nil fontified nil 1359 . 1369) (nil fontified nil 1356 . 1359) (nil fontified nil 1353 . 1356) (nil fontified nil 1338 . 1353) (nil fontified nil 1332 . 1338) (nil fontified nil 1322 . 1332) (nil fontified nil 1307 . 1322) (nil fontified nil 1301 . 1307) (nil fontified nil 1278 . 1301) (nil fontified nil 1270 . 1278) (nil fontified nil 1257 . 1270) (nil fontified nil 1251 . 1257) (nil fontified nil 1228 . 1251) (nil fontified nil 1215 . 1228) (nil fontified nil 1213 . 1215) (nil fontified nil 1210 . 1213) (nil fontified nil 1209 . 1210) (nil fontified nil 1198 . 1209) (nil fontified nil 1192 . 1198) (nil fontified nil 1183 . 1192) (nil fontified nil 1180 . 1183) (nil fontified nil 1162 . 1180) (nil fontified nil 1149 . 1162) (nil fontified nil 1147 . 1149) (nil fontified nil 1143 . 1147) (nil fontified nil 1137 . 1143) (nil fontified nil 1132 . 1137) (1132 . 1728)) nil (25411 36670 229906 805000) 0 nil])
([nil nil ((829 . 836) (t 25411 36670 291269 970000)) nil (25411 36736 214595 319000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -849) (849 . 850) (#(")" 0 1 (fontified nil)) . -849) (849 . 850) (836 . 850)) nil (25411 36736 214585 320000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -836) (undo-tree-id1465 . -1) (#(">" 0 1 (fontified t)) . -837) (undo-tree-id1466 . -1) 838 (t 25411 36736 234403 386000)) nil (25411 36758 510021 266000) 0 nil])
([nil current ((847 . 852)) nil (25411 36758 510005 246000) 0 nil])
nil
